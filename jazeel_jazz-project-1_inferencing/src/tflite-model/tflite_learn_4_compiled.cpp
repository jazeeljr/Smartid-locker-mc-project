/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 09.05.2025 04:15:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 34627, -45694, -33675, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.000148082195664756, 0.00012219716154504567, 0.0001687966869212687, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 63,56,117,-67,-74,27,33,2,-36,51,48,16,10,-41,29,-7,-39,98,58,127,-57,-43,10,-101,-114,90,-40,83,127,-6,-16,-5, 
  /* [1][0][][] */ 58,-34,-66,26,-8,127,-15,-6,119,-61,-2,-78,-71,109,33,-50,91,-83,-1,-94,-107,26,117,76,26,24,3,-39,-77,-49,-5,-22, 
  /* [2][0][][] */ -26,56,-53,56,61,-27,-25,82,67,-3,86,-69,-72,-57,65,84,-56,-51,10,-79,53,86,-30,-60,67,-35,-11,-127,-44,-50,59,-13, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0041280481964349747, 0.0034064578358083963, 0.0047055007889866829, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 614, 381, -173, 206, 353, 305, -69, 308, 319, 202, 235, 120, 54, 333, 406, 219, 211, 862, -221, -175, -533, 302, 397, 111, 314, -178, -519, 609, 650, -299, -322, -456, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5251454139361158e-05, 4.3482948967721313e-05, 5.0281560106668621e-05, 5.028520172345452e-05, 4.7866487875580788e-05, 5.4026779253035784e-05, 7.2953887865878642e-05, 4.4803207856602967e-05, 4.4247248297324404e-05, 6.6237844293937087e-05, 4.8081950808409601e-05, 9.393282380187884e-05, 5.3025130910100415e-05, 5.0513237511040643e-05, 4.6795565140200779e-05, 4.3564141378737986e-05, 4.2405208660056815e-05, 6.4499559812247753e-05, 4.1382594645256177e-05, 5.383029201766476e-05, 4.2422128899488598e-05, 4.7293189709307626e-05, 5.8326411817688495e-05, 5.7225122873205692e-05, 4.6667955757584423e-05, 4.2236591980326921e-05, 4.7580717364326119e-05, 8.5282445070333779e-05, 9.3773611297365278e-05, 5.3206091251922771e-05, 4.1754130506888032e-05, 4.3821386498166248e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -24,-40,113,17,101,-19,-70,-86,58,-119,-89,-12,64,6,-26,59,-34,-32,-104,-43,-57,-94,16,113,-95,9,79,-30,125,13,-20,-68,79,-49,-71,66,-109,-83,-73,44,55,-84,-73,103,44,-97,112,-6,-23,-66,-33,95,-52,-68,-103,108,3,82,101,-92,-59,83,-51,64,2,26,73,99,68,104,82,-96,106,-90,52,95,-96,16,-42,39,67,2,107,-20,-46,-45,-69,54,42,127,-4,-95,16,51,44,21, 
  /* [1][0][][] */ -69,47,-93,-5,-33,81,44,19,81,-74,-94,99,69,-30,29,77,103,-30,104,127,-41,-17,48,34,26,13,-35,113,-20,11,107,-63,47,105,-8,15,61,70,-10,-56,-60,16,-15,-84,-24,49,-49,-60,-19,-68,121,52,20,89,-46,-63,29,106,77,89,-48,118,-73,-72,-51,40,85,45,91,29,16,18,-111,92,-37,58,91,-49,-31,80,-75,93,-56,-100,18,112,-68,-52,81,74,83,29,84,96,25,-4, 
  /* [2][0][][] */ 38,24,-61,72,-24,-52,72,78,-86,106,-34,109,68,-10,64,-103,-57,-27,96,36,-89,-19,86,7,-22,83,82,-3,-68,62,70,77,-59,-22,-89,-93,-84,127,92,-32,-87,-61,-2,-13,-76,95,-29,-70,85,44,74,-77,-47,78,49,8,-38,71,-59,-2,-24,46,7,56,73,31,37,70,-88,40,9,-67,21,-12,20,22,-55,-27,-6,-4,22,-72,-10,-34,-7,-77,-16,-35,72,115,-16,-4,-41,-59,-40,16, 
  /* [3][0][][] */ 80,13,42,-12,-55,37,-93,46,54,-31,70,-20,93,79,76,17,90,91,-87,18,110,-65,-43,-87,-52,-121,-65,105,43,-75,74,15,-40,-18,1,-13,-75,-64,35,56,-29,-91,-69,14,64,29,-25,-74,49,-82,31,6,91,1,39,-80,-98,-86,-93,-34,-71,34,-54,64,50,-16,-46,-19,-16,-46,8,100,29,-127,61,-37,35,74,98,-44,-66,-121,24,88,37,32,-25,-93,-61,9,-9,-76,103,-92,-69,-13, 
  /* [4][0][][] */ 48,108,-2,52,-18,-24,36,27,61,25,6,19,36,-51,-2,-44,-24,6,-98,25,106,-86,95,35,-46,-47,63,-38,-61,41,-64,-43,58,112,25,-105,-31,-52,-103,55,-57,-44,-52,-66,37,102,29,44,27,-37,-17,-62,-66,14,-127,16,28,-72,50,26,19,-63,-51,-52,-37,61,9,-25,26,-83,-85,-61,-38,-13,107,57,66,-22,10,-36,15,-58,-99,-7,10,68,88,17,-88,-77,23,51,37,80,-91,-59, 
  /* [5][0][][] */ 89,-72,76,70,36,-93,22,44,91,-121,11,-63,27,77,38,32,60,26,-104,64,34,46,15,-19,-86,-58,-15,-64,51,29,13,-69,-27,11,-45,21,-109,-62,40,19,-74,-47,43,77,-36,23,37,-36,-127,70,21,31,36,-9,6,-12,83,47,-53,-17,27,-51,11,-51,-21,89,-23,29,75,7,85,-46,-32,28,-18,-54,9,-46,17,68,96,24,26,86,-56,52,8,0,58,-80,96,84,-11,12,76,-99, 
  /* [6][0][][] */ 4,-26,63,45,-56,-38,-5,38,3,-51,0,-55,45,50,65,-65,24,-1,43,60,-45,-69,61,26,65,-45,-1,-40,-19,-63,26,-48,-62,-75,-33,-66,1,50,-55,41,51,41,8,-13,-64,70,-43,4,-46,12,-12,-36,32,-1,66,-20,5,-11,-31,62,-61,-3,115,-43,-28,32,61,-25,45,-3,-53,-6,34,23,-53,-22,-47,-48,-37,-7,16,-9,32,-15,-36,57,-27,-37,56,127,92,2,-35,-22,42,50, 
  /* [7][0][][] */ 121,79,-38,-40,-63,111,-14,9,118,-53,-82,-15,62,-105,54,82,51,24,-44,118,60,28,8,91,-118,59,45,66,-87,110,-16,41,19,33,73,81,-94,45,-8,-17,84,-72,93,78,55,6,87,-111,52,-56,-103,-63,-15,62,-13,27,103,-76,19,-43,17,-1,53,-104,-61,-44,72,29,-100,26,66,91,88,-6,70,65,-53,49,-82,55,96,-61,-24,-62,91,22,-98,100,86,-18,59,73,-46,-45,1,-127, 
  /* [8][0][][] */ 28,41,-30,-82,63,25,-68,-11,16,-6,57,78,15,-47,-69,-61,-58,93,-119,19,41,-18,90,116,-127,72,48,86,-55,28,-87,124,91,-20,60,0,111,-43,-16,81,72,95,-92,-105,-12,-20,-10,109,0,-106,-61,6,-53,-35,-63,-99,42,118,-90,118,119,46,11,112,-26,-32,-16,105,-67,65,35,11,83,20,20,28,-39,96,95,80,47,66,-107,-78,37,27,86,-39,44,-50,-84,113,-71,-108,-30,-1, 
  /* [9][0][][] */ 3,-3,72,31,54,-52,-30,-83,30,64,-14,37,-18,-35,-65,-9,2,28,-15,-41,2,73,-74,-74,127,10,12,8,-6,-33,-53,66,48,1,15,-6,-30,50,0,-44,43,-19,26,-66,67,23,-66,66,99,8,-44,-24,41,-3,-20,73,77,-50,15,-15,-66,74,107,-53,-47,0,74,35,-30,57,88,-72,6,93,-73,-58,-47,-54,-44,74,18,36,74,18,-26,23,28,64,70,67,-4,65,78,24,26,23, 
  /* [10][0][][] */ -44,84,81,-59,-12,79,99,34,36,-24,32,-92,98,53,-23,20,-46,77,-127,-52,-12,21,62,-56,-29,18,-105,-91,-61,73,-84,-69,73,99,114,55,-37,-23,-32,40,-40,101,-89,-23,-88,-45,-18,-68,-20,-6,30,3,62,-1,-87,-35,-121,-4,39,-26,5,68,70,40,107,-60,-85,-16,21,-14,-82,-52,82,31,-62,99,-8,33,71,28,76,-38,40,100,-81,39,97,-19,38,-27,-41,-51,-50,-71,-36,-115, 
  /* [11][0][][] */ 51,5,-7,48,51,21,25,17,57,46,-33,51,-4,-33,11,-27,-28,-27,51,21,14,39,22,-54,-25,-41,-9,29,36,-4,13,-9,-35,-33,25,20,-19,57,17,-28,-8,58,-41,2,-15,-28,-40,-23,127,55,49,31,-40,-12,13,15,-25,-28,48,-44,-37,40,94,6,12,38,-26,13,38,25,-19,-32,20,71,-44,26,-31,18,-22,43,-50,-8,-34,-13,23,66,22,93,-30,36,9,-49,-41,-16,-26,7, 
  /* [12][0][][] */ 11,51,-46,-1,72,9,-27,27,-67,87,-15,28,-38,23,37,-66,-81,-24,26,-66,17,-1,10,75,-26,-21,84,-87,73,11,-28,92,-58,-57,-39,18,1,-25,-10,30,99,36,-100,-36,-12,-70,-27,99,-22,-81,-62,80,28,23,-42,71,-2,-53,46,47,41,94,23,43,91,23,-35,95,42,69,51,54,72,127,-15,-5,-32,36,-103,-78,-50,95,47,9,-30,47,45,90,-71,-41,86,31,84,-1,15,118, 
  /* [13][0][][] */ 107,-54,106,87,85,95,73,46,72,-120,23,-31,87,59,65,-43,-81,-81,-108,10,67,-17,97,-38,-92,26,-4,31,-57,-70,63,45,41,100,-6,40,-90,-59,13,60,-58,47,-34,8,-44,28,10,-18,-23,70,-31,-81,-82,-12,60,-62,-42,31,-48,-45,-20,107,-91,16,-50,-40,-89,82,-12,-6,86,3,-70,11,-63,-28,-84,43,74,-46,59,-94,78,15,-56,-127,93,71,-3,-57,-61,61,99,-54,77,-31, 
  /* [14][0][][] */ -23,-81,92,71,78,-31,-8,-92,-67,-66,79,60,-16,-79,-70,-69,-46,-51,-15,27,-31,40,10,63,-127,-78,-27,39,-100,-101,-69,47,99,-7,-17,7,88,76,36,-93,-10,-104,45,92,63,-95,75,-80,97,31,73,57,100,-42,-35,20,-45,19,53,106,-7,-71,-54,75,-78,0,78,-91,-67,-71,-76,99,12,37,58,-58,57,-105,64,39,54,-41,-105,-26,-90,-98,-87,102,111,-4,70,-35,91,82,-1,9, 
  /* [15][0][][] */ 3,-8,-50,70,98,-82,68,-83,64,13,-59,-2,113,-4,-82,-95,86,25,-53,39,56,8,89,119,65,49,49,104,-12,65,66,-97,-6,11,-56,-22,-51,86,106,-55,5,117,-36,-8,38,-66,-57,-86,4,-66,2,28,-85,-112,-53,-17,66,63,-26,118,-31,-59,-16,104,-28,105,-60,9,-70,11,66,-61,24,-49,73,-96,12,55,119,91,-74,65,-113,-51,-127,-36,-90,55,89,54,-124,-32,56,111,-110,71, 
  /* [16][0][][] */ -53,-13,126,-53,39,112,-59,32,56,14,-103,67,-3,-48,-45,-69,123,64,12,50,116,90,-50,47,-34,50,-78,71,-79,15,40,25,-98,91,71,71,-54,15,-51,-75,20,-56,74,80,51,104,119,-5,-77,-127,-1,121,-48,88,39,57,25,89,52,30,109,112,19,67,55,25,-47,101,71,104,-27,-12,38,66,57,86,-16,98,-114,-13,28,-94,66,7,25,92,118,-12,83,15,-8,125,76,-40,-62,-8, 
  /* [17][0][][] */ 23,-62,20,63,-20,-31,-28,-60,43,-14,61,51,65,82,-77,54,31,60,124,88,-50,8,11,-36,75,75,-31,11,81,-26,16,59,-12,-15,17,26,-11,122,-20,-30,-12,24,-14,-8,21,58,64,-25,113,119,22,54,-5,121,118,-41,-32,49,-32,-83,29,-59,106,76,-35,-53,53,-43,-83,-13,95,18,10,-27,-40,73,99,-1,22,-24,9,50,-27,-37,-62,108,55,13,34,113,-11,-93,3,127,13,75, 
  /* [18][0][][] */ -108,103,100,-82,-8,-119,-104,12,-17,72,-113,-49,-45,25,57,-58,22,-18,85,-18,99,-61,27,-81,21,-110,-11,112,19,35,-4,41,26,-37,-121,-122,-27,36,-32,72,-44,-3,-50,-6,-117,17,18,-9,22,-33,76,26,-109,-14,6,78,-56,38,-17,-126,90,112,13,38,-66,-127,-27,88,63,-74,-92,116,-107,-36,-91,-107,54,56,2,-85,-63,-15,-41,-65,96,-44,57,79,-120,-74,-74,106,84,-56,44,-7, 
  /* [19][0][][] */ 11,20,59,30,43,-69,72,65,77,-29,19,-18,-77,46,-45,45,56,-91,127,42,-18,77,-48,9,123,-56,24,-57,-67,-98,-57,28,72,-69,23,2,8,-42,-48,-89,30,-92,-69,3,-64,30,59,-59,-38,40,-29,34,-34,29,6,-2,13,71,-5,-24,41,-46,82,43,-55,-5,-24,0,-14,38,75,-48,-54,-68,-49,-67,-14,-75,5,93,44,-80,-29,58,-64,20,3,-5,67,29,10,46,-27,97,54,-3, 
  /* [20][0][][] */ -28,82,54,93,-91,91,16,67,9,30,-103,11,-16,84,30,-71,-64,-13,-38,-3,14,-55,-65,-62,79,-78,-96,43,6,9,-46,99,96,33,-25,42,71,-19,-23,-101,-91,-34,-92,-91,-12,-71,-79,100,96,-118,-110,32,48,126,53,-8,88,74,116,71,120,-58,-66,-44,-32,-76,-47,7,-104,-65,-73,78,-68,-77,31,15,115,87,114,113,75,9,77,-28,49,127,-31,108,17,93,21,54,17,29,-29,11, 
  /* [21][0][][] */ 102,80,71,-90,92,-73,70,24,4,-117,-55,13,14,26,-36,-72,-93,-21,-19,-6,105,-39,76,-68,10,-108,-26,78,11,10,-9,-12,6,29,-73,-108,104,47,-107,-20,-18,0,37,-2,-85,-70,-64,81,-23,-75,-8,82,40,35,-127,27,-51,57,-35,122,58,-65,-20,-10,76,38,-27,-56,-87,7,57,79,38,-57,77,66,-95,-32,69,105,20,64,25,-61,33,-99,66,-69,-88,44,83,-92,-25,-72,65,-94, 
  /* [22][0][][] */ 40,-43,-37,-63,69,-41,79,44,-63,32,-43,-85,95,-80,-73,-60,42,44,-127,-60,74,-47,22,23,66,-7,-88,83,-27,-51,-44,-68,40,57,25,20,-17,-35,-38,-87,2,-11,10,67,33,-80,80,-9,-78,-72,7,-3,-45,-84,-53,33,-8,-18,-26,-6,78,-52,-57,-75,-44,25,-86,-25,104,84,-13,4,-42,-10,52,-62,34,-48,51,72,92,-81,-49,-86,70,57,88,-50,-36,27,-42,59,21,14,-3,58, 
  /* [23][0][][] */ 57,-74,18,47,71,-89,-4,-83,43,-91,64,51,19,-82,21,-34,85,-39,-127,64,72,-55,71,-28,-14,-15,58,20,68,39,50,-20,-23,40,23,31,62,-41,-84,-1,-82,-11,5,-92,-64,-70,96,24,44,-100,-73,-41,57,-64,-66,74,-68,-18,62,40,-93,-65,-46,-7,23,34,-92,-78,64,-12,84,-56,2,-47,-31,-75,30,-16,67,87,-35,-53,21,-88,78,0,92,-31,-66,33,81,2,77,-52,-15,38, 
  /* [24][0][][] */ -54,-31,-87,-57,-74,-107,-59,-73,71,49,89,14,119,52,-25,-95,-73,49,-23,-39,99,-66,-35,-24,13,-58,74,67,98,59,0,-50,-2,21,60,17,-41,-127,58,-7,-85,-96,109,17,25,-28,58,67,-77,-56,-23,18,76,26,16,-61,-14,85,41,17,95,-1,11,92,-87,101,-37,-75,-84,63,-48,-12,-23,1,103,100,67,-73,-80,-62,-62,-116,-64,-101,17,58,-1,-81,39,-113,-5,-59,-5,10,-82,-25, 
  /* [25][0][][] */ -76,-67,-75,-13,88,-76,-109,46,39,-124,-47,17,66,7,-120,-32,-81,52,-8,-122,59,95,-23,-68,61,-41,-115,32,90,-101,35,113,95,-117,37,97,87,-54,-31,-28,-85,97,-113,-7,91,36,71,43,-114,87,-79,12,35,-16,-59,13,-18,44,-123,71,112,34,48,45,-9,69,-26,-10,-98,-17,-31,-127,28,-72,65,15,65,68,4,15,45,57,-1,80,-67,-55,-118,-107,-25,-19,119,14,-120,-6,-19,-53, 
  /* [26][0][][] */ 39,-113,-29,-23,-95,-11,-16,-17,-106,-127,88,67,-79,-62,3,-21,95,21,-99,-68,4,55,81,6,6,42,4,35,3,-2,-89,-8,-34,-63,-97,-99,-67,53,-54,93,-96,81,43,22,-71,57,-53,79,-25,12,-11,82,2,-56,-21,-103,77,51,40,16,-5,-91,43,-28,96,-24,-57,44,-85,62,66,80,64,-114,-86,-2,35,-101,-95,-1,-34,50,66,-75,62,-20,-50,5,-84,85,-13,9,-56,97,39,40, 
  /* [27][0][][] */ 10,-2,-23,-29,-43,-15,-12,7,16,108,21,-8,-11,59,45,-15,46,-3,85,-29,-47,25,-13,-12,9,75,-43,-6,51,11,13,2,57,39,-41,-17,-33,67,-10,38,29,36,14,3,55,16,36,67,79,86,59,-30,-37,16,78,-4,81,-16,-22,-45,-36,-25,54,52,45,-26,-44,60,30,7,-44,13,36,65,-5,-41,25,17,38,55,50,35,109,35,-30,-3,-4,10,11,82,3,-27,40,19,56,127, 
  /* [28][0][][] */ 45,6,44,22,-31,-22,-10,-10,-8,10,41,35,-36,-31,6,54,39,62,36,48,2,17,-45,-41,61,80,-35,-28,-25,-10,24,-5,-4,12,40,38,11,23,15,10,82,40,-49,25,-47,6,2,26,36,-7,9,49,-24,29,94,18,41,-7,41,27,-2,-13,42,22,39,38,3,42,-33,23,-42,15,34,86,5,-6,-54,-2,-37,22,-30,-33,127,101,30,-26,39,19,-9,84,-4,-30,-10,29,7,88, 
  /* [29][0][][] */ 31,36,37,-42,-74,10,-95,2,72,25,-80,-60,78,-86,-47,-43,-83,80,73,-54,-68,-36,37,-1,-26,23,-39,-30,-88,-12,83,-8,40,-6,-72,-48,-10,127,-7,70,41,90,-45,60,-1,78,-49,-22,21,-4,46,-77,53,-61,117,35,-79,39,-42,77,-100,75,-50,-41,-52,-58,39,66,69,-72,22,-62,85,108,42,17,86,-47,-33,19,-11,-63,-4,-64,43,105,29,61,-34,96,58,57,-92,22,-8,115, 
  /* [30][0][][] */ 20,-66,-68,28,-103,19,-67,-14,113,-22,-2,-47,-111,9,54,10,-12,34,89,-111,35,-108,-116,10,-115,18,-76,119,-16,-111,-96,-1,-92,-79,-127,-62,14,-24,-5,26,91,-80,-16,101,100,-52,100,59,-73,67,16,-107,95,-56,-17,98,-85,-60,-84,-59,-109,-8,-77,-30,-115,-92,-100,86,-68,106,39,-38,-97,106,40,-91,-65,-74,-77,-65,25,17,-108,-23,-113,25,-114,109,-38,-119,72,52,-41,-8,7,-79, 
  /* [31][0][][] */ 73,-98,30,92,44,57,-66,-103,-31,-12,-83,-80,92,-127,-52,102,-66,-92,55,42,58,27,-37,99,38,-117,32,32,-79,-78,42,99,18,14,-97,-11,90,-29,-72,-115,55,-73,-38,25,0,-59,-45,20,70,16,90,-35,-120,-58,-81,17,-123,61,-2,106,-44,-8,83,-81,65,103,-49,-84,66,-124,-119,5,-103,-24,-4,-3,-64,-51,43,83,-81,-44,47,64,47,90,-99,12,11,-58,-92,-61,3,107,-9,-11, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019231867045164108, 0.0018480252474546432, 0.0021369662135839462, 0.0021371210459619761, 0.0020343256182968616, 0.0022961380891501904, 0.0031005402561277151, 0.0019041362684220076, 0.0018805080326274037, 0.0028151082806289196, 0.0020434828475117683, 0.003992144949734211, 0.0022535680327564478, 0.0021468126215040684, 0.0019888114184141159, 0.0018514759140089154, 0.0018022214062511921, 0.0027412311173975468, 0.0017587601905688643, 0.0022877873852849007, 0.0018029403872787952, 0.0020099605899304152, 0.0024788724258542061, 0.0024320676457136869, 0.0019833880942314863, 0.0017950551118701696, 0.0020221804734319448, 0.0036245039664208889, 0.0039853784255683422, 0.0022612588945776224, 0.0017745505319908261, 0.0018624089425429702, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1809, -119, 2828, 4302, 5297, -2021, 3782, -1485, -2163, -472, 4861, -2669, 4255, 5252, 1720, 2604, -478, -354, -760, 5552, 2250, -763, 2639, -471, -850, 3891, 1499, 2006, 4750, 1915, 4273, 1070, 1488, 4656, 4683, 4100, -397, 4226, 3351, -4304, -415, 1714, 18, 1986, -1191, 315, -1136, 711, -5082, 1865, 1177, -3031, 6295, -1006, 2335, 1363, 1062, 2773, -654, -2152, 407, 1458, 434, 4322, 4897, 2873, 2437, 4848, 3077, -583, 3359, 5110, 3038, -1404, 4750, 6624, 635, -3899, 716, 1246, 7773, 2090, -369, -2860, 1055, 753, 1488, -2437, 3624, -465, 3788, 1094, 189, -2371, -224, 2446, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012569072714541107, 0.00027012161444872618, 0.00020956432854291052, 0.00017358499462716281, 0.00012206302199047059, 0.0002181741438107565, 0.00015673076268285513, 0.00017694973212201148, 0.00018035524408333004, 0.00021859738626517355, 0.00013496041356120259, 0.00016466807574033737, 0.00013379617303144187, 0.00010822556942002848, 0.00016167139983735979, 0.0001515606272732839, 0.00027519912691786885, 0.00018561079923529178, 0.00021849668701179326, 0.00011240662570344284, 0.00019470122060738504, 0.0001446712703909725, 0.00014230015221983194, 0.00017467062571085989, 0.00024987367214635015, 0.00017206200573127717, 0.00018188818648923188, 0.00017979125550482422, 0.000152807348058559, 0.00021874868252780288, 0.00012077493738615885, 0.00020990597840864211, 0.00020166076137684286, 0.00013617365038953722, 0.00013933215814176947, 0.00012528726074378937, 0.00020771086565218866, 0.00013431203842628747, 0.00011049670138163492, 0.00011772707512136549, 0.00014210063091013581, 0.00014268157246988267, 0.00017000641673803329, 0.00013738179404754192, 0.00017830668366514146, 0.00018532294780015945, 0.00020698375010397285, 0.00018845206068363041, 0.00012582491035573184, 0.00017265355563722551, 0.00020853032765444368, 0.0001603371201781556, 0.00011085264850407839, 0.00013786226918455213, 0.00018128858937416226, 0.00017047475557774305, 0.00015528310905210674, 0.00014545804879162461, 0.00023829298152122647, 0.00013842392945662141, 0.00019060919294133782, 0.00016987182607408613, 0.00028047375963069499, 0.00015529143274761736, 0.00013579196820501238, 0.00016461193445138633, 0.0001644108269829303, 0.00014524259313475341, 0.00021211440616752952, 0.00024814187781885266, 0.00014605949399992824, 0.00013813625264447182, 0.00015864525630604476, 0.0001562950637890026, 0.00015273070312105119, 0.00012062156019965187, 0.00014599881251342595, 0.00015678010822739452, 0.00016772955132182688, 0.00017196731641888618, 0.00011208835348952562, 0.00015327514847740531, 0.00020318977476563305, 0.00015590697876177728, 0.00015644998347852379, 0.00018127445946447551, 0.00019455223809927702, 0.00016191646864172071, 0.00017797238251660019, 0.00016709124611224979, 0.00015498025459237397, 0.00019407029321882874, 0.00018486422777641565, 0.000175159249920398, 0.0002503545256331563, 0.0001832985581131652, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -19,89,-98,52,37,-44,119,73,-80,-14,55,-119,69,127,-86,30, 
  /* [1][0][][] */ -26,-5,-57,-37,-12,35,24,-127,33,-47,-29,-48,-10,-47,-43,2, 
  /* [2][0][][] */ -28,-35,29,88,17,44,-107,127,-36,-2,90,-69,-25,-64,-54,68, 
  /* [3][0][][] */ 99,-83,87,-10,8,-17,-41,127,-21,65,58,55,6,59,20,6, 
  /* [4][0][][] */ -47,-29,-21,73,-111,27,-30,-126,-25,-17,55,-38,38,67,117,127, 
  /* [5][0][][] */ 127,25,-16,-31,-82,17,19,68,15,-6,59,95,122,27,-79,1, 
  /* [6][0][][] */ 17,-40,-76,-55,-83,1,6,-48,-60,-65,-26,25,80,50,127,-2, 
  /* [7][0][][] */ -54,37,-24,-80,8,-57,-84,22,-102,61,-77,-72,-127,-34,21,89, 
  /* [8][0][][] */ 47,36,64,9,48,19,71,8,57,-31,40,3,-127,-29,-78,12, 
  /* [9][0][][] */ -36,70,26,-34,-26,-3,49,-12,-25,42,-48,20,37,127,16,48, 
  /* [10][0][][] */ 74,51,-52,70,-33,-6,56,-40,-89,-37,-50,-116,-127,-71,4,95, 
  /* [11][0][][] */ 53,5,59,17,-15,-31,12,116,-93,23,-38,5,-14,-4,73,127, 
  /* [12][0][][] */ -52,-30,-8,-3,13,-10,127,41,-71,14,12,-30,-19,76,-52,95, 
  /* [13][0][][] */ 19,37,23,51,127,45,78,99,-28,98,-95,-37,37,89,-77,-62, 
  /* [14][0][][] */ -112,127,15,-26,3,11,58,5,-30,42,109,0,-86,31,-36,46, 
  /* [15][0][][] */ -9,-14,-127,-51,84,-45,-95,-42,-16,-19,-20,-69,-3,-92,-54,47, 
  /* [16][0][][] */ 104,-20,6,-2,23,-27,43,-25,-39,11,127,46,44,-1,-40,21, 
  /* [17][0][][] */ 6,9,-36,-93,-21,-67,127,-124,-13,-29,-39,26,32,75,-3,56, 
  /* [18][0][][] */ 11,127,-12,-13,64,-74,11,-33,-56,115,-14,8,-42,78,-40,-8, 
  /* [19][0][][] */ -72,-121,113,-88,40,-127,32,-41,40,33,91,95,21,-21,63,-32, 
  /* [20][0][][] */ -20,78,46,12,3,-2,24,-24,45,-13,95,-40,-127,-26,-75,-6, 
  /* [21][0][][] */ -77,52,36,42,101,56,75,52,-127,80,-67,32,-18,25,-65,-49, 
  /* [22][0][][] */ 14,-101,37,23,11,-126,127,16,0,-67,-37,-95,36,-75,-67,-54, 
  /* [23][0][][] */ -65,-107,36,67,19,-24,30,-45,7,-45,93,-4,1,70,72,127, 
  /* [24][0][][] */ 0,0,32,82,46,19,-44,-127,62,11,-37,20,-11,3,-25,-21, 
  /* [25][0][][] */ -12,38,10,-54,-36,-18,16,-44,-33,51,-54,-16,44,127,25,19, 
  /* [26][0][][] */ -70,79,4,11,32,-91,0,-37,17,19,11,77,7,-3,-84,127, 
  /* [27][0][][] */ -23,-127,-54,1,-63,84,6,-58,4,-43,61,-33,21,-45,-97,-19, 
  /* [28][0][][] */ -34,6,38,75,30,13,-40,-127,-114,51,100,-4,75,10,-39,-20, 
  /* [29][0][][] */ -127,99,-29,-42,-30,17,-113,-75,-41,-41,-3,-3,2,-63,-109,58, 
  /* [30][0][][] */ 57,81,-45,72,-104,-88,-76,-11,-36,-2,0,-115,127,39,-1,88, 
  /* [31][0][][] */ 127,36,-54,-40,-52,29,87,36,-43,-7,52,56,58,25,-16,6, 
  /* [32][0][][] */ -44,-28,127,1,-28,76,87,22,-29,-18,-2,24,0,76,64,42, 
  /* [33][0][][] */ -7,15,-78,-53,-35,20,127,28,-22,-20,41,-76,91,117,-63,55, 
  /* [34][0][][] */ -94,-29,81,26,20,-55,101,-10,-127,27,41,-51,36,49,-55,-29, 
  /* [35][0][][] */ -13,3,-64,35,-92,127,-27,-12,-34,111,18,85,-89,79,9,36, 
  /* [36][0][][] */ -16,-85,127,-55,-58,13,-40,-14,16,18,-50,89,-3,-93,-42,51, 
  /* [37][0][][] */ 96,-11,66,-27,127,-92,-49,49,-68,119,-85,1,-111,-60,103,-28, 
  /* [38][0][][] */ 65,58,13,-118,-8,-55,-121,68,-87,61,-126,-54,-76,-127,-105,55, 
  /* [39][0][][] */ -74,20,-59,-25,-81,-74,70,17,-127,-30,28,73,36,3,-10,53, 
  /* [40][0][][] */ 127,50,3,-103,-73,34,10,-32,-47,-20,-61,-79,35,77,43,44, 
  /* [41][0][][] */ 89,-85,-68,-48,-10,-7,-58,-14,56,-28,6,-56,127,-69,56,-29, 
  /* [42][0][][] */ -10,-78,-43,127,-4,-86,-102,22,-3,8,16,41,-75,75,-61,1, 
  /* [43][0][][] */ -91,-47,-54,-111,-64,5,-1,83,35,-127,-25,31,-21,-47,-41,102, 
  /* [44][0][][] */ -50,34,33,-38,-35,-32,36,123,118,-87,89,124,127,48,-34,3, 
  /* [45][0][][] */ 36,80,-70,94,127,-81,-43,-59,117,-60,62,-66,-20,14,-66,57, 
  /* [46][0][][] */ -28,-51,6,-7,98,-30,36,17,-21,124,-19,-127,34,62,-62,87, 
  /* [47][0][][] */ 71,-48,-33,-15,74,-21,-36,-62,-5,127,-21,37,-9,-109,-85,20, 
  /* [48][0][][] */ -4,14,-19,-107,-21,-54,127,-118,24,-7,-34,43,32,48,-1,32, 
  /* [49][0][][] */ -20,127,-64,52,54,-54,60,57,-20,25,21,-90,-13,69,124,-115, 
  /* [50][0][][] */ 16,45,-20,5,-127,3,-69,-54,55,72,29,28,-35,-37,3,35, 
  /* [51][0][][] */ 127,-42,-52,-13,-48,84,-94,-44,42,-19,-40,66,-34,-67,1,40, 
  /* [52][0][][] */ -28,-56,45,47,-36,-123,-127,-18,-35,-59,-52,-66,11,-72,23,71, 
  /* [53][0][][] */ 24,112,57,-127,3,117,109,-17,-17,-33,-2,-44,88,-126,4,66, 
  /* [54][0][][] */ 31,125,6,-16,-10,-95,-90,52,4,-33,-44,127,74,82,12,69, 
  /* [55][0][][] */ -30,-4,59,18,52,-25,95,86,-76,-2,14,11,127,54,-1,-2, 
  /* [56][0][][] */ 127,24,13,28,-47,127,-65,-76,-27,50,-88,12,-60,109,-10,31, 
  /* [57][0][][] */ -41,-44,-59,-22,-67,-91,59,-14,-127,-33,66,33,9,33,-10,35, 
  /* [58][0][][] */ 40,-58,61,16,5,-68,-14,-1,35,-22,-127,-14,14,-32,-34,43, 
  /* [59][0][][] */ 66,7,-127,82,4,28,91,-31,-70,-54,26,-100,-119,-63,26,107, 
  /* [60][0][][] */ -9,24,-20,33,-26,-26,-18,8,-50,-93,76,118,-60,-127,-46,-4, 
  /* [61][0][][] */ -22,22,87,-90,-69,60,-2,127,-29,-96,51,61,99,2,19,116, 
  /* [62][0][][] */ 77,40,-13,-127,-17,0,8,-42,-6,31,-39,45,23,-27,-91,-75, 
  /* [63][0][][] */ -4,-34,-6,3,-71,-77,-54,6,-76,-17,-34,-20,127,-4,52,-14, 
  /* [64][0][][] */ 34,11,-10,59,-102,-35,-26,-78,65,127,30,-4,45,-43,-33,105, 
  /* [65][0][][] */ -28,7,-28,-9,-78,76,22,-20,40,-116,101,-91,67,66,-127,48, 
  /* [66][0][][] */ -116,104,-95,-91,35,-39,-110,-71,-85,110,80,9,-127,-59,51,52, 
  /* [67][0][][] */ 9,-29,-127,-110,72,83,3,-25,-31,0,47,-25,35,42,22,47, 
  /* [68][0][][] */ 63,26,-4,-38,-63,44,10,42,-62,76,127,-21,-4,-40,-117,-6, 
  /* [69][0][][] */ 72,-99,52,-38,20,-103,-31,127,-7,68,81,70,-14,82,-26,-6, 
  /* [70][0][][] */ 51,7,113,56,99,-10,127,20,15,19,-52,24,-68,65,-85,39, 
  /* [71][0][][] */ 3,24,90,-78,-127,-84,20,5,-22,-17,24,-98,-82,-3,6,35, 
  /* [72][0][][] */ -63,-95,18,-117,68,-20,14,46,-72,13,-127,-30,55,115,-59,117, 
  /* [73][0][][] */ 21,16,44,-9,127,-94,-52,10,-34,103,-90,27,-84,-65,127,-16, 
  /* [74][0][][] */ -109,-8,-127,-58,52,-53,-30,21,-86,-5,-108,-38,-45,-54,-45,70, 
  /* [75][0][][] */ 90,-33,41,-55,16,-3,-127,-32,-5,-111,71,7,-6,-18,-9,-11, 
  /* [76][0][][] */ 6,-43,-23,80,49,80,86,-67,96,-104,43,127,48,-96,-43,30, 
  /* [77][0][][] */ -44,-43,127,-34,30,-35,-28,-123,17,17,42,96,46,46,16,4, 
  /* [78][0][][] */ -55,-6,3,-32,-10,-58,40,-9,9,-23,26,-92,-111,-58,-127,-46, 
  /* [79][0][][] */ -113,-87,-35,38,127,31,-11,26,4,25,-7,40,-51,-76,-79,-16, 
  /* [80][0][][] */ 11,-108,34,127,-33,-18,-100,87,-32,24,82,-19,-70,-1,-27,63, 
  /* [81][0][][] */ 110,68,-12,88,-3,43,26,127,24,4,104,64,109,40,59,-9, 
  /* [82][0][][] */ -56,5,11,-24,27,-127,-121,-90,9,85,-49,-31,-27,109,-72,-21, 
  /* [83][0][][] */ 107,-14,82,-23,-33,-4,-127,-3,25,-107,6,-51,-10,-7,19,-26, 
  /* [84][0][][] */ 20,-64,-84,13,127,36,30,37,-123,32,-100,-35,55,-35,-71,23, 
  /* [85][0][][] */ 2,77,32,-46,81,-7,54,-123,127,-43,47,-14,83,-90,0,5, 
  /* [86][0][][] */ 125,-38,127,60,-1,-52,82,49,-77,-55,-90,-56,37,23,-75,16, 
  /* [87][0][][] */ -4,6,21,-72,72,-26,-46,14,43,-36,72,-29,-83,-127,-2,21, 
  /* [88][0][][] */ -59,-34,31,0,21,25,-61,-45,-5,7,-69,-127,-51,-42,-21,-17, 
  /* [89][0][][] */ -64,19,26,-69,31,11,-127,29,77,29,-74,-12,-8,-76,-38,-22, 
  /* [90][0][][] */ -15,-17,-31,-87,127,15,-61,38,39,56,31,-15,35,15,-69,-19, 
  /* [91][0][][] */ -33,-62,26,64,-41,-2,-26,89,-60,-47,49,-63,4,74,22,127, 
  /* [92][0][][] */ -30,67,-2,-4,-30,58,-88,52,-51,-16,76,-3,-42,127,42,23, 
  /* [93][0][][] */ -23,74,-46,-68,73,90,-84,7,77,68,77,66,-127,26,-43,80, 
  /* [94][0][][] */ 37,76,111,33,-127,-31,5,-3,27,-11,29,-20,-49,-17,22,-29, 
  /* [95][0][][] */ -8,25,12,-31,110,-22,-127,81,16,-17,-114,63,-25,-25,93,-29, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0014458813238888979, 0.0031073398422449827, 0.0024107201024889946, 0.0019968324340879917, 0.0014041501563042402, 0.0025097629986703396, 0.0018029499333351851, 0.0020355386659502983, 0.0020747138187289238, 0.0025146317202597857, 0.0015525150811299682, 0.0018942567985504866, 0.0015391221968457103, 0.0012449711794033647, 0.0018597844755277038, 0.0017434753244742751, 0.0031657491344958544, 0.0021351710893213749, 0.0025134733878076077, 0.0012930679367855191, 0.002239742549136281, 0.0016642238479107618, 0.0016369476215913892, 0.002009321004152298, 0.0028744179289788008, 0.001979312626644969, 0.0020923479460179806, 0.0020682259928435087, 0.0017578169936314225, 0.0025163721293210983, 0.0013893326977267861, 0.0024146502837538719, 0.0023198015987873077, 0.0015664715319871902, 0.0016028053360059857, 0.0014412400778383017, 0.0023893988691270351, 0.0015450565842911601, 0.0012710971059277654, 0.0013542716624215245, 0.0016346524935215712, 0.0016413353150710464, 0.001955666346475482, 0.0015803694259375334, 0.0020511483307927847, 0.0021318597719073296, 0.0023810344282537699, 0.0021678553894162178, 0.0014474249910563231, 0.0019861175678670406, 0.0023988254833966494, 0.0018444356974214315, 0.0012751917820423841, 0.0015858965925872326, 0.0020854505710303783, 0.0019610538147389889, 0.0017862968379631639, 0.0016732745571061969, 0.0027411996852606535, 0.0015923576429486275, 0.0021926700137555599, 0.0019541180226951838, 0.0032264257315546274, 0.0017863926477730274, 0.0015620808117091656, 0.0018936109263449907, 0.0018912974046543241, 0.0016707960749045014, 0.0024400549009442329, 0.0028544964734464884, 0.0016801931196823716, 0.0015890483045950532, 0.0018249733839184046, 0.00179793790448457, 0.0017569353803992271, 0.0013875683071091771, 0.0016794952098280191, 0.001803517690859735, 0.0019294744124636054, 0.0019782234448939562, 0.001289406674914062, 0.0017631984082981944, 0.0023373905569314957, 0.0017934736097231507, 0.0017997201066464186, 0.0020852880552411079, 0.0022380286827683449, 0.0018626035889610648, 0.0020473026670515537, 0.0019221316324546933, 0.001782812993042171, 0.0022324847523123026, 0.0021265828981995583, 0.002014941768720746, 0.0028799495194107294, 0.0021085722837597132, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 11512, 10911, -916, 6702, -1062, 5088, 2999, 6928, 12413, -4191, -4490, 4510, -16616, 14790, 3909, 9062, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.84724111831747e-05, 6.1971615650691092e-05, 6.4831117924768478e-05, 7.03483383404091e-05, 6.6254251578357071e-05, 7.3541428719181567e-05, 5.6582091929158196e-05, 4.9459853471489623e-05, 0.00012508856889326125, 8.4893530583940446e-05, 6.9144502049311996e-05, 6.1271617596503347e-05, 6.417805707314983e-05, 6.7994857090525329e-05, 8.4629922639578581e-05, 8.1731712270993739e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -106,37,64,-35,-73,-19,-70,18,-62,7,-17,-31,20,50,35,-33,0,5,109,26,2,-68,127,72,26,13,-2,32,-50,-112,-83,33,-46,-23,19,5,5,24,-5,26,-11,6,-76,24,-73,-22,-6,88,-31,6,-50,-18,-19,-6,29,-47,-111,-5,-3,77,65,24,-4,-6,-34,-50,-50,27,-53,-74,6,-22,1,-2,-88,-50,-49,15,-47,35,-45,69,85,-62,28,38,16,48,24,-18,-14,-30,-39,-51,-74,17, 
  /* [1][0][][] */ 32,25,19,-48,-61,-21,-18,35,-30,22,49,-40,10,2,-70,-26,-24,5,-60,39,-9,-93,24,37,-21,-63,-4,-43,69,-101,104,-52,50,45,-15,44,27,69,-6,-39,36,32,-1,6,9,66,-127,-46,-71,-50,-3,-18,33,-50,-19,56,4,2,-23,6,34,47,6,-105,-17,-18,-54,4,3,-13,-85,-16,-45,-19,7,-69,7,48,15,-53,-1,-16,-77,-21,46,-36,-4,32,-70,-9,-54,33,17,42,-54,55, 
  /* [2][0][][] */ 84,-49,23,23,24,-84,53,-1,-2,-10,-15,-11,-88,-32,14,-44,-87,-44,-34,35,5,-55,-45,35,-16,-73,4,-21,-29,47,-51,121,-57,127,-26,18,-14,-21,-27,-20,-103,78,69,12,-71,3,-21,-15,36,4,-37,-48,56,-27,-17,55,37,-8,54,-4,5,31,-42,12,69,28,-3,-4,36,53,-45,6,37,41,67,35,36,-77,77,60,73,-23,-34,29,-57,21,16,57,19,7,-28,20,-45,48,-22,40, 
  /* [3][0][][] */ 2,-25,-12,2,16,-16,13,-68,-11,60,41,51,10,-14,-45,31,7,-37,27,2,4,127,22,-36,-5,20,-21,3,70,-39,71,-26,-21,32,-43,-32,27,50,29,9,-90,-40,-33,8,-43,31,31,1,-12,-46,-13,-31,49,-98,-41,-59,12,82,-18,10,-7,-9,-52,-1,29,64,-52,-5,-24,-7,6,-71,-26,-51,39,-18,12,-33,-17,-33,-39,-8,-58,5,-8,-40,27,-32,-5,26,27,-28,41,31,-58,63, 
  /* [4][0][][] */ 20,12,-46,23,23,12,-47,15,-45,84,98,-14,-6,15,5,-53,12,-14,-20,45,3,-44,70,80,-72,-3,-127,9,-41,-71,17,24,-63,-51,18,50,7,29,31,18,-46,-35,40,-18,-3,13,-35,47,-44,59,8,25,43,-5,-73,27,47,-26,15,-14,51,-12,36,2,-52,9,-28,15,-44,16,-38,46,27,-66,-49,-37,30,-43,-11,18,-39,94,-78,8,-21,15,35,-49,54,8,35,7,-55,-36,43,31, 
  /* [5][0][][] */ -81,43,34,-7,49,-26,59,-31,-20,35,-2,-37,37,-17,-29,-39,-21,-35,49,34,-119,-17,-59,47,-44,-5,52,4,55,-86,-15,56,63,107,-13,32,-11,27,52,-19,-23,94,80,-23,7,69,45,0,-5,15,-27,20,12,-27,36,-84,36,-62,-62,-66,64,96,-52,-19,76,-52,-68,-62,-51,-13,-55,-7,-14,20,-36,-38,20,-34,-37,-15,127,-29,28,-84,-89,37,40,-11,-47,43,30,12,-19,25,18,88, 
  /* [6][0][][] */ 45,-19,-80,36,-30,-106,98,70,-52,64,-22,72,-127,-96,67,50,16,-49,-18,-12,1,-5,-75,-65,-44,44,74,34,31,29,89,-75,18,14,18,-62,17,-4,21,76,4,6,-70,-41,-6,-74,-69,15,40,-117,-28,79,48,13,-29,-85,77,45,10,-1,-122,49,-108,19,33,15,4,59,48,32,6,-40,-38,14,109,37,71,-48,54,-89,-23,-57,-78,63,-8,-62,37,13,-42,60,37,38,-15,16,-27,111, 
  /* [7][0][][] */ 40,83,-29,-75,-30,-16,32,13,-50,31,-57,-65,-59,18,28,-25,-52,-39,-35,55,-7,127,-5,39,-22,2,21,33,59,58,93,-27,61,43,-35,13,17,-11,-9,40,-82,-10,8,-74,0,-56,86,-29,47,-79,-97,-37,-58,-5,-6,-21,29,19,-95,14,-4,117,23,-32,-21,17,-58,14,-43,-28,-112,36,30,65,-34,40,-63,40,14,-72,-27,-54,65,-82,57,-17,-27,-3,-16,73,-95,32,59,-35,-72,16, 
  /* [8][0][][] */ -8,81,-51,42,-29,-26,-76,39,-100,-24,4,12,-24,38,19,82,-7,-45,8,23,26,0,26,-2,-33,64,4,24,-4,-24,-41,-13,-13,-50,-18,-73,-43,33,49,-1,2,-24,32,35,-25,-28,3,-16,-31,-22,48,67,-3,-4,-49,99,-37,24,-3,-36,-32,8,15,45,-37,-65,-23,-5,-36,6,1,-2,-23,-42,-122,-15,-40,51,-64,-28,-12,8,-34,-31,3,-9,32,35,18,50,-63,2,-87,-127,31,-46, 
  /* [9][0][][] */ -19,16,-80,44,-34,-46,61,77,-24,47,-21,100,-31,-8,23,127,1,13,80,19,5,0,45,-107,-50,-5,18,-11,24,-21,46,82,-28,19,-4,-123,24,-16,-21,-24,-27,27,43,1,-17,11,16,14,23,95,22,-6,-70,-85,7,5,-12,-10,79,-16,-56,49,-47,-43,79,-13,-27,13,-66,12,34,30,-17,88,-38,-14,-34,34,-58,13,65,-20,64,6,49,-16,2,-33,-55,21,2,-7,61,23,-58,5, 
  /* [10][0][][] */ 68,-5,-29,-7,-34,-20,76,-7,26,-29,-19,-17,-94,-27,19,-12,-63,-24,8,9,44,31,9,8,-35,74,42,-10,-58,-61,-24,-23,58,-36,20,16,84,-81,62,127,8,-66,5,-29,-39,-95,5,53,37,86,-71,-51,-19,13,0,41,23,-53,73,55,-18,46,-63,-14,-5,-33,10,44,18,-28,-11,43,123,25,35,-85,25,-70,60,-17,-58,26,33,4,-41,-2,-9,36,-46,-8,30,47,50,68,-46,0, 
  /* [11][0][][] */ -40,-21,33,-55,8,-23,-34,-18,32,-35,-1,-2,4,9,-8,12,-73,0,73,27,-48,2,-51,-73,10,7,-37,41,49,-54,39,0,22,12,19,-34,-69,13,-99,2,-56,78,-37,78,20,17,-17,-38,5,-39,-48,-44,11,16,92,-44,-30,-56,18,-47,-11,-45,-13,-127,4,-69,55,74,102,10,57,-27,-39,-16,45,-26,76,62,6,53,47,-4,-16,87,85,-1,9,-16,-58,-62,-11,21,49,22,44,79, 
  /* [12][0][][] */ 38,-28,-7,-48,38,111,-16,58,43,64,3,61,11,68,11,-5,-85,52,30,72,126,-12,77,-77,20,20,-80,-82,3,85,9,36,40,15,1,-51,45,-9,-30,-45,14,-17,42,88,-25,49,0,-15,-71,31,-4,24,-38,-31,16,26,-48,63,16,60,41,-98,19,-122,-11,98,-16,-36,-3,-59,64,10,-13,15,-26,61,-14,59,-81,13,4,34,127,32,14,70,-22,-73,79,12,-92,60,72,-4,-30,-102, 
  /* [13][0][][] */ -4,22,-3,-49,-35,-23,-7,-29,20,-40,-38,-74,45,-105,-29,-85,-10,-30,-83,-26,-99,-45,10,99,-46,-8,103,12,28,-32,64,50,-3,19,-127,113,-24,-64,19,-59,102,12,-14,34,-24,-98,64,-40,77,-15,-51,35,30,-22,-3,57,67,-49,-27,-4,53,42,3,-97,-1,54,-48,44,-66,-55,-81,0,-76,13,-41,-85,-105,11,45,101,-21,61,30,-87,75,36,23,-15,-23,-19,-18,-2,-56,12,-47,-2, 
  /* [14][0][][] */ -8,26,-77,-28,71,75,-87,12,18,-39,68,-4,17,-16,-42,-58,-81,18,43,127,4,-32,-2,0,-10,25,-25,61,23,-6,-19,26,59,14,-31,-8,-22,46,68,9,52,13,19,28,-3,-34,41,-46,7,-20,-4,-22,33,8,-23,40,3,58,-78,-14,-8,-56,-26,-104,5,-48,-49,-1,-73,37,-26,18,-2,-27,-35,-29,27,2,-58,-12,45,9,-2,-2,1,37,1,-17,-24,57,62,13,-6,-46,-46,-53, 
  /* [15][0][][] */ -57,-40,48,-52,17,-16,-26,-92,10,10,-11,56,-12,-29,39,79,-84,-21,13,-71,27,-19,-21,-71,56,-13,50,-41,-62,-81,-60,13,-40,51,74,-74,3,-42,14,-18,-25,-14,18,-40,-8,-10,72,90,-25,-10,25,-34,-34,46,2,-57,-74,-7,90,23,-34,22,-86,35,-50,2,3,20,42,-67,80,-15,60,-41,-9,-47,15,4,58,0,-28,63,41,27,-5,-9,-127,7,-9,-50,-78,18,47,-15,-19,52, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0024850773625075817, 0.0026337937451899052, 0.0027553224936127663, 0.0029898043721914291, 0.0028158056084066629, 0.0031255106441676617, 0.0024047389160841703, 0.0021020437125116587, 0.0053162639960646629, 0.003607975086197257, 0.0029386412352323532, 0.0026040435768663883, 0.0027275672182440758, 0.002889781491830945, 0.0035967717412859201, 0.0034735978115350008, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -967, -64, -2909, -5626, -176, 2101, -3546, -687, 166, -4846, 8135, -2073, -1592, 8357, 8588, -4295, 15973, 870, -4962, 338, -571, -3578, 3319, -1814, 420, -2833, 1573, -3921, -842, -8782, -1302, -318, 12287, -1167, -928, 79, 191, -1160, -1046, 9394, 778, 262, 717, -3429, 12005, 14702, -266, 11513, -2177, 12276, 13344, -3153, 100, -1447, 1218, 10421, -385, 308, 14212, 5357, 11686, 9233, 9674, -10110, 2239, 2521, -4027, 2109, -3261, -1507, 2589, 1395, 10740, -64, 96, 10222, -1454, -872, 7288, -1822, -533, 14214, -1562, 2558, 15177, 4468, -3966, -3537, -232, -6347, 17147, 17, 310, -366, -2948, -3084, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00024828998721204698, 0.00016252780915237963, 9.6444142400287092e-05, 0.00012742682883981615, 0.00026143866125494242, 0.00027750703156925738, 0.00035329701495356858, 0.00031877527362667024, 0.00026482882094569504, 0.00014914943312760442, 9.8246062407270074e-05, 0.00030150325619615614, 0.00024582372861914337, 0.00014676936552859843, 0.00015164658543653786, 0.00013569026486948133, 0.00011752592399716377, 0.00023409412824548781, 0.00015501730376854539, 8.398722275160253e-05, 0.00019686557061504573, 0.00030240285559557378, 0.00023157557006925344, 0.00019482002244330943, 0.00047364688361994922, 0.00026388626429252326, 0.00029831906431354582, 0.00014453487528953701, 0.00022840940800961107, 7.8260170994326472e-05, 0.00035835528979077935, 0.00027270108694210649, 0.00015009996423032135, 0.00017108694009948522, 0.00033798927324824035, 0.00048482196871191263, 0.00019674630311783403, 0.00038530028541572392, 0.00031117518665269017, 0.00013725258759222925, 0.0001904299424495548, 0.00022205934510566294, 0.00024312608002219349, 0.0001587590086273849, 0.00011483377602417022, 8.1816033343784511e-05, 0.00023489375598728657, 0.00012856845569331199, 0.00020366521493997425, 7.5000083597842604e-05, 0.00012060302105965093, 0.00012482993770390749, 0.00017029340961016715, 0.00018555262067820877, 0.00020568534091580659, 0.00017046681023202837, 0.00022036666632629931, 0.00019029968825634569, 0.00015591934788972139, 0.00013532611774280667, 0.00011092384374933317, 0.00023627557675354183, 0.00015168472600635141, 7.4918563768733293e-05, 0.00016096705803647637, 0.0002729807747527957, 0.00017941746045835316, 0.00024190562544390559, 0.00021392348571680486, 0.00026295339921489358, 0.00024889601627364755, 0.00017120524717029184, 0.00017120355914812535, 0.00026208718190900981, 0.00026917486684396863, 0.00011246930080233142, 0.00011546009045559913, 0.00029911220190115273, 0.00020912422041874379, 0.00025635224301367998, 0.00033353694016113877, 0.00011021218233508989, 0.00026804106892086565, 0.00018379196990281343, 0.00011557220568647608, 0.00016340325237251818, 0.00015125497884582728, 0.00016968620184343308, 0.0002545270835980773, 0.00017142017895821482, 7.2799237386789173e-05, 0.00031981791835278273, 0.00022863427875563502, 0.00025396441924385726, 0.00022911890118848532, 0.00030212881392799318, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 36,127,14,45,-35,-4,48,43,53,-89,-109,36,-24,-2,25,-77,-127,30,19,57,33,80,54,122,14,-14,-44,1,-4,2,16,-14,-69,15,-33,114,5,62,0,13,30,-47,0,67,-100,-34,14,-20,-24,-86,-67,-12,-5,58,-25,-6,-80,-65,-68,-127,-127,3,-96,31,-42,37,69,-16,-22,43,34,-14,-18,11,47,8,18,-29,-76,30,10,-63,55,-44,-127,-73,-13,7,-105,4,-110,41,63,-15,61,-4, -46,-44,-8,101,-9,95,-4,-6,63,32,-127,74,-26,-33,-90,112,-103,77,67,109,127,28,90,127,25,9,10,29,1,127,-10,-107,93,109,3,56,75,122,-32,-120,127,-17,94,127,-59,-80,127,-58,-10,-103,-127,-53,-9,127,-31,-127,7,40,-125,-71,-56,-127,-55,121,-53,81,127,-23,3,127,127,17,-73,18,-41,-88,41,-33,-3,127,-8,-56,127,-96,-95,-71,84,43,94,99,-118,7,127,-22,127,31, 21,-123,18,38,-17,-15,6,41,19,57,-108,20,-9,52,17,-94,-56,28,18,37,33,60,44,95,16,-40,20,18,14,15,6,-58,-67,-64,-37,88,-5,17,5,-17,-9,25,-19,82,-54,-34,0,13,37,-59,-5,4,-7,12,4,-6,52,-80,-23,-66,-118,24,-80,28,33,19,6,-14,-39,-3,22,6,26,-41,-14,9,26,-7,-73,9,10,-90,36,-22,16,-65,3,-30,-75,-17,-37,40,20,54,47,-7, 
  /* [0][1][][] */ 97,-11,85,127,11,-51,127,40,-40,-125,-94,127,12,-127,-60,31,-86,-42,75,51,-107,9,-127,-60,-17,29,-127,127,-74,81,127,101,30,69,12,119,-127,70,-12,-88,56,-127,19,71,-127,-64,8,-109,-118,-103,-77,8,127,-47,61,-24,-127,-6,-70,3,-92,-53,-55,72,-112,-36,97,-84,-54,23,-47,-127,-127,66,127,-80,111,64,-87,-35,127,-113,-26,124,-47,-24,18,110,2,19,-71,30,-6,-91,58,-25, -127,5,-56,108,-92,-127,-106,-127,66,19,-19,44,-67,-87,-56,127,-115,-127,127,127,37,-127,-115,92,-127,127,3,78,-76,-17,-120,76,-127,86,127,-37,2,127,127,-113,-49,28,28,29,-32,-127,-68,-127,6,-127,-78,127,38,66,43,-56,24,29,83,-19,-84,-41,-127,127,-14,-127,92,127,34,60,-122,-78,-37,49,-121,-127,127,127,127,-44,-81,7,-93,94,-112,-122,127,127,127,127,-127,-127,-99,-57,41,127, 49,-7,121,90,6,-21,17,40,-53,127,-44,81,13,-12,-127,50,0,-26,21,31,-105,15,-88,-82,2,14,101,-15,127,100,23,-127,-28,-127,-19,127,-120,-13,-34,-92,-15,86,28,90,-14,-23,3,-58,127,-109,-54,2,48,-66,-127,10,104,-3,-127,57,-47,-42,-7,79,127,-54,7,-9,-69,-11,-48,-34,-120,-127,-20,-39,1,-7,-120,-31,-61,-127,-15,127,-111,16,21,-6,-18,-10,-16,40,-14,127,24,-9, 
  /* [0][2][][] */ 38,-119,43,12,6,19,34,42,-50,-21,13,-63,25,-14,-6,40,-24,12,-17,42,-15,44,4,-41,31,33,-3,-2,-24,27,4,31,-25,-15,-27,-14,41,4,16,-35,-6,11,-17,-26,-24,-41,-16,10,-7,12,-59,35,-1,-1,-43,-19,-6,-18,8,38,-51,12,24,6,-36,31,-17,-29,33,-3,10,82,-10,21,27,7,-30,-30,-17,3,3,-5,-12,-57,-19,31,-24,12,-85,45,-10,24,-17,-5,20,-22, -41,15,127,15,127,78,-24,2,-127,40,-36,-51,127,-23,-70,32,16,53,-20,-58,8,19,47,-15,70,-49,-17,52,0,123,-2,31,-94,28,10,-35,64,63,39,-127,-22,-5,-127,-1,4,-25,-37,-40,7,-67,-62,92,90,-53,-42,-75,-21,127,-24,27,59,-78,81,87,-32,17,-9,9,127,-11,-1,91,-65,21,-25,-79,-5,-65,-52,-33,-1,-65,-29,-86,-39,127,13,19,66,58,37,29,-34,-18,6,-6, 16,95,13,2,5,-2,-4,45,4,90,28,-6,13,-3,-13,62,-44,-7,-17,46,-22,30,-13,-40,19,31,9,33,23,34,-2,-85,-55,-29,-23,-23,49,-43,12,3,-9,4,5,-35,-33,-16,-21,-12,42,24,-44,24,-32,-17,1,-5,-2,-9,18,62,-55,22,16,-5,21,11,-45,9,42,3,-3,71,-3,-12,-9,2,-16,-5,-4,11,-1,-55,-10,-12,-4,33,-26,-11,-77,54,3,21,-30,13,1,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.01055232435464859, 0.0069074318744242191, 0.0040988759137690067, 0.0054156403057277203, 0.011111143045127392, 0.011794048361480236, 0.015015123412013054, 0.013547948561608791, 0.011255225166678429, 0.006338851060718298, 0.0041754576377570629, 0.012813888490200043, 0.010447508655488491, 0.0062376977875828743, 0.0064449794590473175, 0.0057668359950184822, 0.0049948515370488167, 0.0099490005522966385, 0.0065882350318133831, 0.0035694569814950228, 0.0083667868748307228, 0.012852121144533157, 0.0098419617861509323, 0.0082798507064580917, 0.020129991695284843, 0.011215166188776493, 0.012678559869527817, 0.0061427322216331959, 0.0097073996439576149, 0.0033260572236031294, 0.01523009967058897, 0.011589796282351017, 0.0063792485743761063, 0.0072711948305368423, 0.014364544302225113, 0.020604932680726051, 0.0083617176860570908, 0.016375262290239334, 0.013224945403635502, 0.0058332346379756927, 0.0080932723358273506, 0.0094375219196081161, 0.010332858189940453, 0.0067472578957676888, 0.004880435299128294, 0.0034771813079714775, 0.0099829845130443573, 0.0054641594178974628, 0.0086557716131210327, 0.00318750343285501, 0.0051256283186376095, 0.0053052720613777637, 0.0072374697774648666, 0.0078859860077500343, 0.0087416265159845352, 0.0072448393329977989, 0.0093655828386545181, 0.0080877365544438362, 0.0066265719942748547, 0.0057513597421348095, 0.0047142631374299526, 0.01004171185195446, 0.0064466008916497231, 0.0031840389128774405, 0.0068410998210310936, 0.011601682752370834, 0.0076252417638897896, 0.010280989110469818, 0.0090917479246854782, 0.011175518855452538, 0.010578080080449581, 0.0072762230411171913, 0.0072761513292789459, 0.011138704605400562, 0.011439931578934193, 0.0047799451276659966, 0.0049070538952946663, 0.012712268158793449, 0.0088877789676189423, 0.010894970037043095, 0.014175319112837315, 0.0046840175054967403, 0.011391744948923588, 0.0078111584298312664, 0.0049118185415863991, 0.0069446382112801075, 0.0064283367246389389, 0.007211663294583559, 0.010817401111125946, 0.0072853574529290199, 0.0030939674470573664, 0.01359226182103157, 0.0097169568762183189, 0.010793487541377544, 0.0097375530749559402, 0.012840474955737591, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 6575, 2435, 1360, -1334, 4812, 7562, 7989, 4328, -465, 8948, 495, -4123, 3467, 2986, 564, -290, 3313, 6882, -388, 220, 4279, 18925, 8507, -1314, -3677, -934, 9411, -206, 1842, 900, 11115, -1629, 7645, 1749, 5574, -4466, 700, -5661, 137, 1601, 2058, 1384, 1485, -1050, 1088, 2365, 2742, 3149, 3002, 2517, 4574, 3042, -2273, 1580, 1654, 2800, 1897, 2590, 7981, 1762, -990, 6206, 4618, 2650, 3835, 7516, -5525, 2174, 6191, -696, 7151, 1541, 2006, 4002, 3177, 1994, -508, 2564, 3596, 3105, 3222, 3478, 7574, 970, 3280, 6502, 302, -1202, 13768, -333, 849, -820, 8782, 2734, -601, -664, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011284735955996439, 0.0001472752628615126, 0.00014533339708577842, 0.00017908647714648396, 0.00015490420628339052, 0.00010593917249934748, 0.00010856152221094817, 9.9267999758012593e-05, 0.00013349628716241568, 8.8198699813801795e-05, 0.00024407755699940026, 0.00011479233944555745, 0.00014641323650721461, 0.00015816617815289646, 0.00015610306581947953, 0.00013696726819034666, 0.00017943748389370739, 0.00010333761019865051, 0.00014157668920233846, 0.00016338747809641063, 0.00014030540478415787, 5.0529110012575984e-05, 0.00010419785394333303, 0.00019051761773880571, 0.00013655293150804937, 0.00012124131171731278, 9.5212868473026901e-05, 0.00018083570466842502, 0.00015528732910752296, 0.0001767205394571647, 7.2819653723854572e-05, 0.0002144428581232205, 0.00010397717414889485, 0.00024567311629652977, 0.00012749312736559659, 0.00014305485819932073, 0.00017163764277938753, 0.00010970694711431861, 0.00020022319222334772, 0.00018450748757459223, 0.00019392227113712579, 0.00017160682182293385, 0.00022683583665639162, 0.00021842026035301387, 0.00028505650698207319, 0.00013430938997771591, 0.00019727306789718568, 0.00018497447308618575, 0.0001913993910420686, 0.0001731209340505302, 0.00015066166815813631, 0.00013790414959657937, 0.00017884458065964282, 0.00022226104920264333, 0.0001701613946352154, 0.00014479875972028822, 0.0001808201486710459, 0.00015113851986825466, 0.00010295263928128406, 0.0001404946087859571, 0.00021875262609682977, 0.0001206672823172994, 0.0001423544017598033, 0.00019729362975340337, 0.00015438588161487132, 9.4779512437526137e-05, 0.0001110997109208256, 0.00018851656932383776, 0.00011201441520825028, 0.00021623032807838172, 9.7953539807349443e-05, 0.00014652805111836642, 0.00019311951473355293, 0.00010187600128119811, 0.00017597057740204036, 0.00012348106247372925, 0.00017718652088660747, 0.00013116213085595518, 0.00011934912618016824, 0.00016260298434644938, 0.00014438305515795946, 0.0001233391958521679, 0.00010075781028717756, 0.00013410214160103351, 0.00013601189129985869, 0.00011706922668963671, 0.00018102588364854455, 0.00021031958749517798, 6.7745859269052744e-05, 0.00013685584417544305, 0.00020837545162066817, 0.00028587348060682416, 9.7119882411789149e-05, 0.00015222154615912586, 0.00020420020155142993, 0.00018131842080038041, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -73,42,-8,-31,-58,-85,-47,-23,43,-56,51,-51,79,-127,26,-104, 
  /* [1][0][][] */ -127,51,-91,-126,-86,-7,-6,57,-34,-7,116,-45,65,107,28,60, 
  /* [2][0][][] */ -58,-30,-98,18,-16,-51,34,-37,-75,127,87,31,29,62,-55,107, 
  /* [3][0][][] */ -56,-80,2,-58,-87,3,-49,-127,3,10,46,-71,-76,-43,-118,-44, 
  /* [4][0][][] */ 74,4,-16,56,-63,0,-127,43,11,59,19,29,6,8,-54,-82, 
  /* [5][0][][] */ -97,60,-87,-45,52,-59,-46,-103,97,-20,14,-57,42,-120,-108,-127, 
  /* [6][0][][] */ -9,-34,-40,3,-53,76,26,-27,-38,-47,127,-16,-3,1,-110,5, 
  /* [7][0][][] */ -32,113,127,-72,43,79,0,-47,48,95,-111,-47,61,8,15,72, 
  /* [8][0][][] */ -33,32,68,-35,56,1,96,127,-109,-31,-94,-105,40,84,-80,-69, 
  /* [9][0][][] */ 42,100,101,14,-102,-42,-92,-104,39,32,127,-3,-28,-97,61,-1, 
  /* [10][0][][] */ 21,-122,3,-108,-127,84,4,13,-28,-45,-32,54,-9,42,-111,16, 
  /* [11][0][][] */ 117,-60,-19,95,-119,-31,59,0,127,125,-36,44,22,-80,-19,120, 
  /* [12][0][][] */ -57,-58,127,-19,53,-9,12,36,50,-41,98,81,-18,12,-83,26, 
  /* [13][0][][] */ 2,-26,23,24,22,26,116,42,-127,26,7,-14,-10,95,102,-86, 
  /* [14][0][][] */ 108,-65,127,-7,71,39,89,43,73,55,36,19,54,-46,8,-54, 
  /* [15][0][][] */ -2,127,4,-45,33,126,-83,72,-66,-36,-33,-2,-49,127,-28,-52, 
  /* [16][0][][] */ -47,57,100,-40,22,76,15,0,-14,4,-5,41,80,6,68,127, 
  /* [17][0][][] */ 25,106,60,-127,32,-33,-7,-69,-50,82,-35,48,-58,-24,97,-56, 
  /* [18][0][][] */ -86,12,-69,-84,127,79,-41,-79,52,86,125,82,-30,119,-48,-9, 
  /* [19][0][][] */ 31,127,91,82,61,-27,15,12,-25,86,46,99,54,69,-68,47, 
  /* [20][0][][] */ 105,1,5,54,-71,-3,-20,57,-26,-52,-127,-60,92,-52,26,2, 
  /* [21][0][][] */ -109,-85,-41,127,-24,-13,-118,79,-2,-25,78,22,-43,32,-91,40, 
  /* [22][0][][] */ -4,9,-81,-54,127,-13,-40,52,60,86,44,68,-5,34,6,23, 
  /* [23][0][][] */ -64,19,-13,19,9,45,83,80,-6,127,-24,-22,-2,22,-48,-31, 
  /* [24][0][][] */ 7,-97,36,15,127,24,98,-36,75,14,75,22,-101,40,-39,-2, 
  /* [25][0][][] */ 115,-59,90,20,18,-23,-19,89,126,-29,-59,2,127,-62,86,45, 
  /* [26][0][][] */ 52,25,77,91,54,1,-68,-7,6,51,23,127,23,-43,37,-50, 
  /* [27][0][][] */ -54,46,-55,15,-26,114,-1,-101,37,-75,109,22,56,-51,127,100, 
  /* [28][0][][] */ -56,38,-79,-127,44,-67,9,-33,-100,117,-66,7,-10,53,-27,66, 
  /* [29][0][][] */ 81,80,-84,46,26,74,-42,-15,53,40,6,62,-127,10,-27,75, 
  /* [30][0][][] */ -26,117,-123,-97,100,-46,-6,11,-72,74,-90,-6,40,71,3,127, 
  /* [31][0][][] */ 22,-119,75,27,64,-54,-68,39,-18,-25,32,-29,-81,44,19,127, 
  /* [32][0][][] */ -44,90,7,33,-121,80,-5,53,20,-127,15,-103,31,25,68,53, 
  /* [33][0][][] */ -61,1,61,85,-15,20,-50,5,-47,-57,21,-35,-18,-10,-3,127, 
  /* [34][0][][] */ 3,30,-89,-109,65,-3,-15,72,6,-4,-12,-35,-34,-14,-28,127, 
  /* [35][0][][] */ 72,-6,23,-13,-4,26,-81,-24,-16,-127,-56,14,-3,-31,51,-28, 
  /* [36][0][][] */ 2,44,-127,-30,21,115,13,49,-5,17,57,8,10,8,-93,93, 
  /* [37][0][][] */ 51,51,90,-52,60,-127,42,-10,-120,52,-83,-48,24,34,92,45, 
  /* [38][0][][] */ -19,127,32,-46,38,33,54,-74,15,4,-108,43,-46,-98,-80,9, 
  /* [39][0][][] */ 92,49,-116,-127,-21,-46,3,-91,39,8,-13,-31,76,16,-120,-99, 
  /* [40][0][][] */ -28,32,-62,-86,-43,-10,10,-127,-4,-4,-4,-26,36,63,46,55, 
  /* [41][0][][] */ -46,-102,-11,127,-14,-20,-71,-11,-8,-56,74,-63,-70,-6,5,27, 
  /* [42][0][][] */ -23,58,-15,-127,7,14,10,-31,58,-5,-35,19,62,-25,-17,17, 
  /* [43][0][][] */ -3,65,14,51,103,36,35,26,-20,47,3,-75,-127,-25,-21,-6, 
  /* [44][0][][] */ 71,-9,21,33,-25,-13,20,46,17,-39,30,-2,127,3,-65,-14, 
  /* [45][0][][] */ 30,-117,-69,34,-44,-117,-18,29,53,-10,2,39,-90,127,61,-67, 
  /* [46][0][][] */ -4,-67,40,80,-34,-6,-100,32,36,-66,46,-31,29,78,84,127, 
  /* [47][0][][] */ -46,-59,18,93,-3,-10,61,26,3,-70,-127,-37,42,-28,-72,34, 
  /* [48][0][][] */ -80,107,-20,-34,8,45,-5,-107,-3,-28,67,-55,58,-127,-48,32, 
  /* [49][0][][] */ -54,14,33,-30,-5,15,115,127,-47,-25,-1,31,-40,45,-38,42, 
  /* [50][0][][] */ 55,23,-73,36,37,-124,-35,3,-76,54,-39,-13,33,-91,-127,-37, 
  /* [51][0][][] */ -68,60,-15,103,-46,37,-62,-104,-73,-106,-2,-58,7,30,-5,127, 
  /* [52][0][][] */ -127,2,25,-7,20,38,56,3,19,-83,-43,-36,-100,-54,-106,-11, 
  /* [53][0][][] */ -42,-70,-59,-127,-32,5,-2,88,30,-58,-31,15,-17,33,64,95, 
  /* [54][0][][] */ 8,-43,-3,1,-66,71,52,-18,-33,-88,66,27,-21,1,-127,31, 
  /* [55][0][][] */ -21,-28,-67,15,79,-22,76,109,-72,-68,-127,-40,58,-29,-33,58, 
  /* [56][0][][] */ 54,-36,-62,-16,-127,27,-105,4,-17,-16,-26,12,90,-21,55,9, 
  /* [57][0][][] */ -58,13,23,-31,127,41,54,43,-35,58,5,-8,-47,74,-109,-16, 
  /* [58][0][][] */ 37,10,14,-32,49,-9,-67,-77,73,-127,-83,0,-72,-59,-24,49, 
  /* [59][0][][] */ -103,-53,-17,60,-12,52,-94,-49,115,127,-79,39,-64,13,-10,-16, 
  /* [60][0][][] */ 23,-42,-6,24,-127,-43,30,7,-11,39,-11,35,3,-34,37,42, 
  /* [61][0][][] */ 27,37,-82,-14,-42,-20,-127,-86,-9,10,34,105,64,-63,90,67, 
  /* [62][0][][] */ 59,-21,48,-22,-32,43,39,127,-73,115,34,64,42,48,82,119, 
  /* [63][0][][] */ 20,-127,-25,-31,-61,5,47,-16,-9,-25,3,-22,-37,108,94,26, 
  /* [64][0][][] */ -16,-7,-127,-26,22,55,25,-8,-2,-93,51,5,65,-30,-77,100, 
  /* [65][0][][] */ -3,3,65,65,100,-46,115,94,-45,-12,-127,-85,25,100,-100,21, 
  /* [66][0][][] */ -50,-127,-18,-117,-66,-116,53,-20,-30,-56,28,56,-62,-36,-69,78, 
  /* [67][0][][] */ -18,-85,-78,-14,-86,113,-17,-127,-67,-24,-49,-101,9,-18,-67,26, 
  /* [68][0][][] */ 122,36,33,5,-85,15,-64,-53,-67,-127,-22,-2,25,-21,60,-95, 
  /* [69][0][][] */ 32,6,38,-18,-9,-47,-41,30,-21,127,-30,-4,0,34,69,-13, 
  /* [70][0][][] */ 28,-24,-49,85,-127,56,-9,-110,121,114,46,99,31,-49,-11,27, 
  /* [71][0][][] */ 127,-69,71,86,-63,-62,31,-29,112,23,-49,23,92,-68,24,30, 
  /* [72][0][][] */ 9,-19,60,76,57,5,-127,76,46,1,23,2,-21,-68,-56,76, 
  /* [73][0][][] */ 72,18,61,-127,42,-97,-68,30,-19,91,-36,11,8,-98,49,-21, 
  /* [74][0][][] */ 80,13,45,34,-127,-42,44,-11,-87,-52,19,-50,9,-74,1,13, 
  /* [75][0][][] */ 73,127,-97,23,59,61,-11,-38,-5,-29,47,90,-124,62,53,78, 
  /* [76][0][][] */ -81,-49,-1,-55,-69,-13,106,-9,-71,22,103,47,-65,-127,-11,86, 
  /* [77][0][][] */ -75,122,-11,12,-76,-127,56,92,49,-71,-19,87,-34,44,-7,96, 
  /* [78][0][][] */ 127,58,-68,33,-89,36,-114,-28,-9,-11,-85,-7,29,-110,13,77, 
  /* [79][0][][] */ -56,-26,127,59,-12,-78,-54,-58,-8,36,-1,29,-57,114,-53,60, 
  /* [80][0][][] */ 67,127,17,-67,-15,60,103,-14,22,33,-51,3,95,-21,-5,11, 
  /* [81][0][][] */ 34,-81,12,-111,100,40,-14,127,119,29,-21,-38,-30,27,-90,-81, 
  /* [82][0][][] */ 73,45,81,0,127,-96,36,37,4,94,-32,27,-4,-50,26,-103, 
  /* [83][0][][] */ -26,75,-7,19,78,70,127,109,-10,43,-27,-65,-97,105,-55,-85, 
  /* [84][0][][] */ 14,-127,-11,92,33,-89,-118,41,-101,111,-100,-7,-126,65,18,-110, 
  /* [85][0][][] */ -120,69,-50,-2,-63,-47,-84,-57,-32,75,10,-106,-127,-92,-58,46, 
  /* [86][0][][] */ -14,58,101,127,50,-35,45,11,11,37,-72,-57,39,76,-110,-98, 
  /* [87][0][][] */ -19,50,127,-31,-117,-25,25,20,33,-24,14,43,-64,31,0,-8, 
  /* [88][0][][] */ -20,-63,-111,18,45,33,-22,18,12,-62,-119,-104,127,-26,16,27, 
  /* [89][0][][] */ 31,19,12,-125,5,-71,-48,55,127,-27,29,-117,0,-41,53,-76, 
  /* [90][0][][] */ 7,81,28,12,-42,45,35,122,-2,-54,-13,127,64,10,-44,87, 
  /* [91][0][][] */ -36,15,-22,46,71,36,-26,-102,-41,28,-13,-10,-79,-127,-46,-4, 
  /* [92][0][][] */ -29,58,3,-20,-127,3,-67,35,-33,35,83,63,-16,-13,51,8, 
  /* [93][0][][] */ 106,48,125,52,-127,-101,19,59,-56,-70,-10,-69,38,-56,-13,13, 
  /* [94][0][][] */ -26,-127,23,-125,14,31,-19,-9,74,-24,-4,45,9,41,-29,38, 
  /* [95][0][][] */ -33,-62,-37,-67,105,107,-29,51,76,42,-65,45,-24,127,-76,39, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00157025211956352, 0.0020493105985224247, 0.0020222899038344622, 0.0024919582065194845, 0.0021554660052061081, 0.0014741257764399052, 0.0015106153441593051, 0.0013812975957989693, 0.0018575784051790833, 0.0012272701133042574, 0.0033962982706725597, 0.0015973161207512021, 0.0020373156294226646, 0.0022008558735251427, 0.0021721480879932642, 0.0019058765610679984, 0.0024968425277620554, 0.0014379255007952452, 0.0019700159318745136, 0.0022735092788934708, 0.0019523262744769454, 0.00070310407318174839, 0.0014498956734314561, 0.0026510206516832113, 0.0019001112086698413, 0.0016870525432750583, 0.001324871089309454, 0.0025162985548377037, 0.0021607971284538507, 0.0024590366519987583, 0.0010132732568308711, 0.0029839363414794207, 0.001446824986487627, 0.0034185000695288181, 0.0017740454059094191, 0.0019905844237655401, 0.0023883089888840914, 0.0015265537658706307, 0.0027860722038894892, 0.0025673906784504652, 0.0026983958669006824, 0.0023878801148384809, 0.0031563825905323029, 0.0030392813496291637, 0.0039665135554969311, 0.0018688926938921213, 0.0027450216002762318, 0.002573888748884201, 0.0026632903609424829, 0.002408948726952076, 0.0020964317955076694, 0.0019189132144674659, 0.0024885924067348242, 0.003092725295573473, 0.0023677672725170851, 0.0020148504991084337, 0.0025160820223391056, 0.0021030672360211611, 0.0014325687661767006, 0.0019549590069800615, 0.0030439060647040606, 0.0016790650552138686, 0.0019808376673609018, 0.0027453077491372824, 0.0021482536103576422, 0.0013188410084694624, 0.0015459338901564479, 0.0026231764350086451, 0.0015586618101224303, 0.0030088087078183889, 0.0013630071189254522, 0.0020389133132994175, 0.0026872255839407444, 0.001417587511241436, 0.0024486011825501919, 0.0017182182054966688, 0.0024655207525938749, 0.0018250989960506558, 0.0016607231227681041, 0.0022625932469964027, 0.002009066054597497, 0.0017162441508844495, 0.001402028021402657, 0.0018660088535398245, 0.0018925826298072934, 0.0016289986670017242, 0.0025189449079334736, 0.0029265617486089468, 0.00094267231179401278, 0.0019043261418119073, 0.0028995093889534473, 0.0039778817445039749, 0.0013514069141820073, 0.0021181371994316578, 0.0028414116241037846, 0.0025230154860764742, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -26100, -10730, 3024, -13813, 12605, -13778, 26955, -8154, 11826, -10869, 15356, 9152, -4902, -30522, -381, 4754, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 9.1642359620891511e-05, 5.6183438573498279e-05, 5.7967288739746436e-05, 5.9430531109683216e-05, 9.5319017418660223e-05, 0.00013228715397417545, 5.8822810387937352e-05, 8.4713166870642453e-05, 0.00011385634570615366, 0.00010783008474390954, 9.8657415946945548e-05, 8.4861785580869764e-05, 8.1309837696608156e-05, 7.3571718530729413e-05, 8.1152116763405502e-05, 6.9002169766463339e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 25,29,14,14,-27,-68,-12,0,-15,-74,8,-3,58,-58,49,23,-71,-17,37,4,67,8,-66,9,-9,65,127,59,8,74,49,-28,14,-3,1,-23,28,18,-6,-3,103,21,16,-15,-6,-6,21,-30,17,-30,84,-11,-63,0,38,36,-5,-43,7,14,-3,28,-56,-8,19,0,63,36,-1,-11,18,21,11,29,6,26,40,-24,44,23,-18,40,26,42,-55,1,-11,61,12,7,-81,-18,24,10,97,67, 
  /* [1][0][][] */ 27,40,-58,-31,-7,-57,118,-89,-70,-49,-69,-56,8,-56,-5,-46,-25,-3,-52,-8,-17,-122,120,-40,-9,24,11,67,-55,29,-54,43,-24,38,20,17,-37,56,-65,103,39,15,-8,-43,78,-45,19,58,-114,12,69,-123,-44,54,72,71,52,22,-76,13,-44,-5,-9,-15,51,47,123,10,-46,-127,6,7,56,66,-15,41,-79,-8,114,-32,35,-12,54,-53,-36,-82,-14,12,-36,-42,32,-12,81,-85,-33,68, 
  /* [2][0][][] */ 2,-13,11,-8,44,44,-36,18,-45,35,3,-25,32,-10,16,20,33,-23,-127,-4,-13,-35,-18,26,-7,-8,-38,21,-42,-11,-13,71,-18,-33,-4,8,-35,27,-19,-24,59,16,8,31,11,60,6,-10,-78,12,-20,15,-20,38,16,-56,41,13,46,26,-20,-11,-16,46,30,2,-34,5,-2,3,-13,-35,15,52,30,69,-59,-15,-28,-35,34,25,42,1,-8,-47,-20,-47,-31,-31,-4,64,-1,-5,84,-36, 
  /* [3][0][][] */ 45,-30,-25,-103,-33,-30,125,-28,45,116,-93,-20,26,-25,-26,45,66,39,-4,9,-64,28,30,17,-44,91,64,-3,-70,-20,-66,63,9,-32,13,-47,20,-58,-31,63,5,21,-19,16,60,-56,20,26,37,-19,32,-38,111,54,24,-4,4,-24,3,-42,-26,40,81,-5,-40,-33,116,-16,-39,-13,-53,21,12,-73,3,-72,8,-65,127,2,-18,-67,-53,-19,-39,-46,71,82,-65,51,-55,22,7,-89,-25,36, 
  /* [4][0][][] */ -20,68,29,4,-11,13,-32,-18,19,-36,2,-20,21,32,-26,27,-9,-32,-27,-63,25,-36,-66,13,-39,-27,-19,9,-31,127,-50,-10,10,-38,-3,-34,60,44,-34,9,19,11,22,-29,-36,-5,64,-17,14,-14,-49,-13,-58,28,41,19,2,54,-21,21,-37,-59,-26,9,55,25,-71,-3,8,-3,7,-68,1,51,52,56,-45,25,-64,36,12,57,31,-52,40,-70,-25,-68,-32,-44,-42,-18,-6,13,37,-31, 
  /* [5][0][][] */ -7,-11,38,-27,-3,-19,-12,0,36,14,-18,-4,-21,-26,19,-4,-16,7,-53,-32,-18,19,-19,13,26,-45,65,-19,-4,43,14,77,-10,-80,22,19,-41,-30,-32,0,-49,-3,-20,11,8,24,-73,22,-17,16,51,-8,22,-76,4,24,-29,-56,8,-34,45,24,20,43,-42,11,104,-26,-6,-26,9,18,8,30,35,10,-3,-4,127,37,-25,-5,-27,23,41,66,11,99,2,-40,-7,4,14,-14,-35,14, 
  /* [6][0][][] */ 17,-58,60,25,-36,114,-51,-96,-26,-74,-85,64,2,8,-33,73,14,17,7,-49,-82,-12,-83,-55,6,-53,-18,82,-127,37,-15,-31,32,66,-28,-10,7,-32,22,-28,-73,46,40,-41,16,45,-114,-19,58,9,-88,-112,86,-2,-39,-26,22,-32,26,-27,-26,-40,42,-7,45,-91,-68,-52,-106,17,-15,-78,-50,-91,15,-102,86,-6,-74,40,-20,71,27,-97,70,-48,-29,1,-71,76,-72,93,44,-45,75,-90, 
  /* [7][0][][] */ -5,-8,-57,55,-37,-4,31,8,-85,-8,65,52,9,-55,-2,-52,-8,-19,14,-2,-54,-22,-26,-29,67,42,-3,68,-15,18,30,18,-44,-127,19,72,6,10,-36,8,-7,-6,4,-71,22,44,65,67,-22,48,-34,-4,25,-25,25,-49,-22,34,-66,-16,60,8,12,-31,62,-48,96,1,-59,-19,67,4,-22,-26,-71,-25,26,-51,88,-24,-5,-16,-78,-18,36,17,-68,40,-15,17,10,48,60,-1,69,8, 
  /* [8][0][][] */ -5,-55,12,-8,-14,-6,20,-3,-6,-3,44,31,9,24,-37,10,65,18,15,14,-5,-75,-38,-23,-30,-38,64,-4,2,51,6,-20,-10,9,5,12,-50,-21,14,-18,4,33,24,-29,17,-6,29,-4,35,0,49,-5,-5,1,-38,1,-21,98,-54,4,-9,-57,-57,-3,-70,-23,-26,4,-6,12,34,-12,-18,-127,42,-100,11,33,-68,18,-32,-4,4,53,60,-54,-31,42,-32,81,6,-34,-46,7,-5,-60, 
  /* [9][0][][] */ -24,-25,-30,16,-3,19,2,36,-36,-2,64,45,-24,51,23,-42,-9,60,-30,-35,-5,26,-14,-2,-28,19,10,11,34,6,8,3,-8,-16,7,50,-20,-12,27,3,-6,-21,4,13,17,45,19,47,-49,9,-6,24,124,17,-13,7,17,-22,33,18,-28,-5,80,16,21,31,60,5,39,11,-24,26,12,-127,-33,-119,-38,-5,33,1,-11,28,-4,-32,39,7,-49,-4,-7,111,38,25,52,33,-10,35, 
  /* [10][0][][] */ 17,48,11,7,-14,14,-46,-18,51,9,-41,20,19,12,-6,-69,-33,-6,25,-5,10,-6,-17,-24,20,-20,-98,44,-29,47,4,-2,14,14,-24,-3,21,0,7,-8,30,-7,52,-44,-35,0,9,18,21,0,9,-15,-21,-5,-7,31,-8,7,-16,-3,-4,-36,2,9,-12,-29,-88,-26,-51,-15,41,-14,-20,34,31,22,50,-31,-94,9,-8,32,0,-6,5,11,-73,-127,-29,24,5,28,50,-32,17,40, 
  /* [11][0][][] */ 23,-35,12,-2,-58,19,18,3,74,-18,-16,-49,27,17,23,2,-17,71,12,-42,10,19,11,-30,26,12,63,-12,35,-45,-38,30,28,107,-98,22,12,-18,57,15,-49,49,-29,25,-28,11,0,3,48,-12,-28,-27,-23,1,-69,88,-22,-6,-2,-30,27,-4,-7,-57,7,-31,-127,-83,-2,-30,-91,34,65,13,-4,2,24,70,-119,-34,-18,-3,-14,6,-17,-7,59,72,12,-43,4,-4,-22,16,85,35, 
  /* [12][0][][] */ 31,31,-31,-30,5,-28,4,42,62,-53,19,1,15,-17,-4,4,15,-40,-34,15,10,46,3,52,-45,-34,-127,-11,75,-26,29,9,-6,-80,70,-4,34,-17,4,24,1,-54,10,43,48,3,48,-7,-85,5,-53,95,82,-19,33,-75,13,24,-41,-38,21,49,85,10,-8,-11,30,38,112,34,25,25,15,-23,-16,-4,-49,-54,38,-66,15,-52,28,-27,-2,-1,-1,-115,-13,38,-46,23,21,70,14,50, 
  /* [13][0][][] */ -15,28,-85,31,26,12,-14,6,32,68,-41,35,-51,-26,75,-72,23,55,65,16,-40,-47,-5,16,45,51,-21,32,2,37,63,-20,-21,62,-8,34,32,-40,-54,-48,-9,-8,4,17,53,42,-44,41,-43,42,6,-4,-21,-41,62,40,8,-62,-8,-14,31,14,10,-25,7,93,127,48,18,6,-43,-20,42,57,-82,54,15,-86,126,-36,-6,-45,21,4,32,54,-39,-24,-10,-24,17,62,48,15,65,69, 
  /* [14][0][][] */ -4,51,29,10,-68,-48,20,39,-66,-26,77,4,-73,-2,78,-6,-36,49,-59,34,-28,9,-106,5,-53,-2,-54,-127,15,7,17,87,-48,28,13,0,-35,-80,-5,-35,36,-37,40,-13,-10,51,-60,39,-20,-39,94,17,-19,29,-33,36,-61,33,-1,41,41,50,-18,50,23,-37,8,-74,40,62,75,32,-35,34,13,10,26,4,38,23,-82,121,-7,-122,82,-10,13,11,-112,-19,-27,-14,-26,3,37,35, 
  /* [15][0][][] */ 64,-34,14,41,42,5,-20,-6,15,29,-54,-5,63,58,-3,-37,-9,-17,-79,48,1,-25,14,30,62,-24,80,35,33,-51,-28,51,55,45,6,-80,65,74,58,47,87,39,-11,6,-49,-127,22,-43,-27,-22,-11,0,-4,-57,-30,51,-11,10,-11,15,0,-46,-24,24,31,33,-70,43,-13,-38,1,-8,-14,-112,-50,-101,-23,5,-108,32,87,-39,55,24,-49,-2,-16,-19,50,88,11,-42,-28,-26,37,-34, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0038948003202676773, 0.0023877960629761219, 0.002463609678670764, 0.0025257975794374943, 0.0040510580874979496, 0.0056222039274871349, 0.0024999694433063269, 0.003600309370085597, 0.0048388945870101452, 0.0045827785506844521, 0.0041929399594664574, 0.0036066258326172829, 0.0034556679893285036, 0.0031267979647964239, 0.0034489647950977087, 0.0029325922951102257, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 8562, -1359, -3832, 6495, -2339, 2818, 557, -1990, 2357, -6021, 905, -2568, 8245, -2632, -2826, -6180, -520, -1005, -8033, -1373, -1532, 1588, -5927, 970, -16, 9266, -9122, -4947, -1048, -3260, 1179, -551, 14050, -470, -1635, 674, -766, 10646, 2509, 9429, 1062, 5815, 287, 8760, 140, -779, 15554, 3544, -7907, -429, -3678, 832, -1874, -2995, 56, 3426, -1254, 1601, 464, 1416, -808, 1117, -1816, 5865, 14147, -133, 11982, 11309, 1562, 765, 8943, -2066, 118, 793, -3335, -825, 19843, 15442, 10891, 11687, 15360, -2278, 11669, 10052, -772, -2442, 13273, -7629, 12599, -886, -5779, -2557, -109, 1527, 17500, -2392, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012042061280226335, 0.00027497499831952155, 0.00023936474462971091, 0.00017192622181028128, 0.00022715033264830709, 0.00051978632109239697, 0.00012370455078780651, 0.00025126885157078505, 0.00039410952012985945, 0.00015666156832594424, 0.00032289716182276607, 0.00021744761033914983, 0.0001059739151969552, 0.00019977027841378003, 0.00024404050782322884, 0.00019700944540090859, 0.00028184917755424976, 0.0003685660776682198, 0.00016484390653204173, 0.00038917706115171313, 0.0002892602642532438, 0.00025242689298465848, 0.00012509596126619726, 0.00017536574159748852, 0.0019889464601874352, 0.0001577155344421044, 0.00025813636602833867, 0.00017245992785319686, 0.00034571404103189707, 0.00016732983931433409, 0.00017464789561927319, 0.00038792649866081774, 8.1408245023339987e-05, 0.00050742225721478462, 0.00018284260295331478, 0.00019340778817422688, 0.00042365759145468473, 0.00012238677300047129, 0.0002531651989556849, 0.00011369719868525863, 0.00051854824414476752, 0.00019146125123370439, 0.00019945832900702953, 0.00012757549120578915, 0.00016799307195469737, 0.00028769572963938117, 0.00013153579493518919, 0.00024879275588318706, 0.00012624767259694636, 0.00049993232823908329, 0.00025685472064651549, 0.00018066083430312574, 0.00015197048196569085, 0.00027262145886197686, 0.00029974739300087094, 0.00023074547061696649, 0.00016690217307768762, 0.00047388911480084062, 0.00045803611283190548, 0.00035928754368796945, 0.00029846481629647315, 0.00027651549316942692, 0.00016350373334717005, 0.00012647247058339417, 0.00019234395585954189, 0.00047541514504700899, 0.00013753572420682758, 0.00012541409523691982, 0.00020905678684357554, 0.00036684388760477304, 0.00011398598871892318, 0.00033280908246524632, 0.00047178636305034161, 0.00017612661758903414, 0.00015241472283378243, 0.00022580235963687301, 6.8193337938282639e-05, 0.00014113445649854839, 0.00012439058627933264, 0.00013681191194336861, 0.00011123449803562835, 0.00026766472728922963, 0.00011623172031249851, 0.00025567159173078835, 0.00010775896225823089, 0.00029164779698476195, 0.0001083863025996834, 0.00020069570746272802, 9.9296914413571358e-05, 0.00026469110161997378, 0.00014721507614012808, 0.00024277294869534671, 0.00034331850474700332, 0.00015373980568256229, 0.00010486273095011711, 0.00035778243909589946, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,-4,-5,-40,104,-8,22,1,-5,9,-15,-4,-17,-2,3,-23,-11,10,-13,-15,-15,21,11,30,7,-26,-19,3,17,11,25,5,0,3,-4,-28,0,-57,-31,-5,-1,-3,43,-54,-18,42,-97,-22,-4,13,0,48,-54,-5,32,-22,10,-14,8,-20,-12,-16,-5,-42,-30,-25,-43,-31,-27,22,-23,3,32,11,-2,0,-14,-2,127,-22,-127,14,-124,-21,-27,-10,1,13,-52,-10,0,-38,-6,26,-22,18, -18,39,42,-63,-33,-8,127,-47,-3,-8,-38,21,-65,6,-75,83,-5,67,59,-29,-19,127,81,107,44,-17,48,89,127,48,127,-26,-112,-19,-78,-43,-36,-66,127,-47,-28,-127,-21,-61,73,-25,-58,-9,51,8,29,127,-81,32,-93,-14,-78,-3,-3,23,-6,-127,-127,-38,-72,-5,-10,-102,-22,15,-67,120,-127,-11,8,-26,-122,-88,-5,-100,-103,14,1,-65,106,89,-66,40,-116,1,19,-8,11,127,-60,-68, -32,3,-9,-15,72,-13,42,-15,-25,21,-13,3,4,0,2,-37,-6,3,-11,-20,-16,9,12,25,4,-25,-8,-10,10,12,14,12,13,2,-15,56,-2,-72,-25,23,-3,-11,13,-23,-15,-30,-61,-30,-3,-2,-1,31,16,-17,2,-16,69,-20,11,-21,-12,-11,-48,36,-41,-29,127,-41,-16,17,-11,12,39,-1,7,27,-35,7,-42,-20,-82,5,-127,-29,7,-20,-2,-5,-59,-33,1,58,8,28,-18,15, 
  /* [0][1][][] */ -85,-3,17,-49,51,86,-36,-6,-4,-11,-28,-15,-127,19,24,73,-10,48,55,25,24,-27,118,-36,37,14,73,22,-11,5,-11,-25,-127,-13,64,-22,4,-127,-61,-127,-21,-3,85,-52,-78,127,-117,-92,97,68,24,-56,-97,82,67,-38,38,-27,32,-10,14,-4,84,-87,-49,14,-25,-68,-21,-10,-127,26,74,127,20,-72,-127,-73,-61,-45,-112,2,-42,-61,32,26,-116,64,-127,127,74,-80,127,3,-51,0, 47,127,127,127,-127,-127,82,-55,127,127,-79,-59,-95,127,-19,127,127,-127,127,127,127,-92,100,-127,-127,-127,127,127,-116,127,-28,127,-68,127,127,-109,127,82,1,-22,127,-8,-127,-127,127,-19,127,127,127,-127,127,-123,113,127,-127,127,-127,127,-127,127,-94,113,109,-127,127,127,-15,127,-126,-127,-8,-127,7,112,127,73,-34,-127,92,-127,36,127,98,127,127,74,-127,127,-78,51,-3,-23,-92,-18,-127,-21, -127,-29,12,-57,17,41,-49,11,-41,-10,-5,127,-126,12,27,46,-19,53,57,14,13,-27,74,-35,42,-6,40,-4,-12,-11,12,-14,-76,-27,77,127,11,-98,-73,-64,-28,-26,28,-41,-70,-66,-91,-114,63,72,-3,-22,127,12,95,-50,108,-24,46,-38,0,-39,-111,-22,-88,-5,-54,-79,-26,-2,-117,12,40,-89,5,127,-121,-50,-57,-14,-112,-5,-81,-80,-4,30,-100,49,-82,-67,127,127,-41,-24,-63,-4, 
  /* [0][2][][] */ -4,-33,-23,-30,36,-5,-12,20,-9,19,29,-32,76,-4,-6,-36,-2,-2,-25,-18,-18,-18,10,-20,9,-20,-12,5,4,-5,-34,2,8,0,-3,-30,9,-15,-19,-23,-36,-12,28,-10,23,16,-83,-11,-10,13,-23,-18,8,-35,30,-21,18,-19,3,-22,9,14,-2,11,-55,-22,113,25,20,18,-10,6,-22,-6,-5,-22,11,-17,-30,-21,-15,9,-78,-19,-12,-1,27,-12,-3,4,-17,-10,-14,-18,-11,-5, -22,-52,27,-95,-34,-8,30,127,-57,93,127,-32,-45,14,127,105,-10,-27,86,-45,-21,-43,127,8,22,-19,28,13,-5,13,-105,-46,-58,-28,-101,-13,-95,-79,32,-61,-27,-114,-35,95,21,-19,-84,-9,51,1,-10,-6,64,24,-51,-49,-43,-43,39,-59,127,21,124,4,-101,-51,-23,-39,127,23,-35,29,25,-26,20,-18,-9,-67,0,47,-98,-13,-106,-81,39,-127,-31,19,-28,2,33,8,8,-124,-66,127, -6,10,-18,-11,34,-14,-3,18,-25,11,12,26,80,-10,-1,-40,-8,24,-3,-23,-14,-12,6,-13,-3,-20,-16,-15,2,-5,-41,4,11,5,-8,-13,6,-44,-28,-8,-42,6,-1,-12,21,-6,-88,-1,-11,2,-16,-11,3,-46,22,-20,69,-12,6,-22,5,9,7,12,-34,-27,-31,11,16,7,-17,11,-49,-35,-16,-9,-24,-33,95,-21,-26,3,-63,-7,-18,7,28,3,5,4,-11,25,-2,-22,-11,-7, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0051178759895265102, 0.011686436831951141, 0.010173001326620579, 0.0073068640194833279, 0.0096538886427879333, 0.022090919315814972, 0.0052574435248970985, 0.010678925551474094, 0.016749653965234756, 0.0066581168211996555, 0.013723129406571388, 0.0092415232211351395, 0.0045038913376629353, 0.0084902364760637283, 0.010371721349656582, 0.0083729010075330734, 0.011978589929640293, 0.015664057806134224, 0.0070058656856417656, 0.016540024429559708, 0.012293560430407524, 0.010728142224252224, 0.0053165783174335957, 0.0074530439451336861, 0.08453022688627243, 0.0067029101774096489, 0.010970795527100563, 0.0073295468464493752, 0.014692846685647964, 0.0071115181781351566, 0.0074225356802344322, 0.016486875712871552, 0.0034598503261804581, 0.021565444767475128, 0.0077708107419312, 0.0082198306918144226, 0.018005447462201118, 0.0052014375105500221, 0.010759521275758743, 0.0048321308568120003, 0.022038299590349197, 0.0081371031701564789, 0.008476979099214077, 0.0054219583980739117, 0.0071397055871784687, 0.012227068655192852, 0.0055902712047100067, 0.010573691688477993, 0.0053655258379876614, 0.021247124299407005, 0.010916325263679028, 0.0076780854724347591, 0.0064587453380227089, 0.011586411856114864, 0.012739263474941254, 0.0098066823557019234, 0.0070933420211076736, 0.020140286535024643, 0.01946653425693512, 0.015269719995558262, 0.012684755027294159, 0.011751907877624035, 0.0069489087909460068, 0.0053750798106193542, 0.008174617774784565, 0.020205143839120865, 0.0058452682569622993, 0.0053300987929105759, 0.0088849132880568504, 0.015590865164995193, 0.0048444042913615704, 0.014144385233521461, 0.02005092054605484, 0.0074853813275694847, 0.0064776255749166012, 0.0095966001972556114, 0.0028982167132198811, 0.005998214241117239, 0.005286599975079298, 0.0058145062066614628, 0.004727466031908989, 0.011375750415027142, 0.0049398480914533138, 0.010866042226552963, 0.0045797559432685375, 0.012395030818879604, 0.0046064178459346294, 0.0085295671597123146, 0.0042201187461614609, 0.01124937180429697, 0.0062566408887505531, 0.010317849926650524, 0.01459103636443615, 0.0065339417196810246, 0.0044566658325493336, 0.015205753967165947, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 910, 4923, 315, 2094, 4568, 12692, 102, 2565, 8589, -735, 15272, 3140, 1691, 340, 3154, -36, 2278, 3862, -112, 8170, 931, 9074, -1302, 1367, -6180, 1048, 3029, 1036, 4827, 930, 3380, 3915, 1526, 10811, 3529, 3322, 4075, 2102, 3588, 2144, 16648, 1793, 2575, 1234, 2446, 7479, 5257, 10267, 871, -957, 1886, 4029, 2518, -2738, 7225, 93, 1740, 14595, 1243, 1879, 1889, 10138, 3199, -275, 14492, 13081, 2143, 3869, 5856, 5053, 1836, 1275, -3468, 4412, 1966, 3231, 337, 9161, 4112, 6041, 4544, 1039, 3912, 13817, -294, 9264, 4810, 2185, -607, 2472, 1136, 8412, 2739, 3079, 5218, 3873, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00037066472577862442, 0.00014578260015696287, 0.00024590379325672984, 0.00019844040798489004, 0.0001455653109587729, 7.3614683060441166e-05, 0.00020880748343188316, 0.00012862496078014374, 0.00010417828161735088, 0.00015092632384039462, 5.7175740948878229e-05, 0.00015057284326758236, 0.00018309321603737772, 0.00053186877630650997, 0.00016438176680821925, 0.00016267136379610747, 0.00026302243350073695, 0.00016966540715657175, 0.00030435077496804297, 0.0001093041937565431, 0.00025437260046601295, 8.7532411271240562e-05, 0.00019727551261894405, 0.00019499573681969196, 0.0001183970452984795, 0.00019895313016604632, 0.00017512567865196615, 0.00026943846023641527, 0.00017896581266541034, 0.00025265704607591033, 0.00017617814592085779, 0.00014000559167470783, 0.00025502502103336155, 7.8762001066934317e-05, 0.0001559521333547309, 0.00019247527234256268, 0.00014526816084980965, 0.00021643615036737174, 0.00014221741002984345, 0.00020859669893980026, 5.9241938288323581e-05, 0.0001545850100228563, 0.00016509540728293359, 0.000141097218147479, 0.00015105906641110778, 0.00011143057781737298, 0.00013775138359051198, 7.3611561674624681e-05, 0.00028115115128457546, 0.00026753416750580072, 0.00021186885714996606, 0.00018233842274639755, 0.00018449983326718211, 0.00015255216567311436, 9.9129123555030674e-05, 0.00040132316644303501, 0.00016421456530224532, 6.3770581618882716e-05, 0.00015494601393584162, 0.00015259862993843853, 0.00021503859898075461, 8.642380271339789e-05, 0.00017725936777424067, 0.000221526890527457, 6.8153334723319858e-05, 6.6534063080325723e-05, 0.00019978632917627692, 0.00016275378584396094, 0.00012919417349621654, 0.00010076769103761762, 0.00024376291548833251, 0.00015060596342664212, 0.00015629264817107469, 0.0001473504671594128, 0.00020207632042001933, 0.00018601640476845205, 0.00028145813848823309, 9.2534821305889636e-05, 0.00014343766088131815, 0.0001342849136563018, 0.00010759427823359147, 0.0001368655648548156, 0.00013268018665257841, 6.9035544584039599e-05, 0.00012486528430599719, 8.0024867202155292e-05, 0.00015238989726640284, 0.00020587421022355556, 0.00022897600138094276, 0.00021075332188047469, 0.0001819365716073662, 9.7240095783490688e-05, 0.00018373815692029893, 0.00013911460700910538, 0.00011019399971701205, 0.0001508658315287903, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 41,-2,6,60,-127,-24,83,41,72,83,-22,48,17,14,17,56, 
  /* [1][0][][] */ -17,32,-75,0,127,90,-7,-10,-15,23,-62,39,-47,75,-51,-43, 
  /* [2][0][][] */ -50,77,72,11,74,85,15,41,31,-7,52,-10,56,-127,-15,21, 
  /* [3][0][][] */ 127,-30,29,0,41,31,-19,13,40,48,-65,-19,-49,67,-27,63, 
  /* [4][0][][] */ -85,-36,-2,45,-127,-15,-102,-39,-42,44,-1,-60,-36,35,-32,123, 
  /* [5][0][][] */ -93,2,27,18,127,29,7,21,-53,31,-15,18,-71,45,-91,-35, 
  /* [6][0][][] */ -127,34,-29,33,-6,-69,72,7,10,-28,-57,39,14,-10,-42,11, 
  /* [7][0][][] */ 16,103,61,-106,83,48,127,4,57,9,-15,39,117,23,-35,0, 
  /* [8][0][][] */ -25,-2,-66,37,-31,84,-34,-67,26,-28,68,31,127,40,-85,12, 
  /* [9][0][][] */ -32,-127,-38,75,-60,-69,4,70,44,41,21,72,-105,13,0,-26, 
  /* [10][0][][] */ -41,-48,-78,48,-127,113,52,-90,1,-64,69,-44,58,123,-74,99, 
  /* [11][0][][] */ -24,-116,-47,47,-5,119,29,11,39,18,41,-93,25,106,-127,108, 
  /* [12][0][][] */ -7,-61,-51,74,-81,-127,-6,36,93,78,-43,104,5,-62,-5,-21, 
  /* [13][0][][] */ -66,-24,-39,-5,-19,-5,34,19,-20,127,-7,-32,36,31,19,-8, 
  /* [14][0][][] */ -124,-29,-44,-51,-9,106,-25,-116,127,-63,71,-15,117,-64,-103,-107, 
  /* [15][0][][] */ 0,-127,86,-40,-58,-38,3,63,15,-52,-82,-32,80,-36,-29,-45, 
  /* [16][0][][] */ -21,-22,19,-44,26,29,-14,-23,61,-127,42,-28,-10,5,-73,-87, 
  /* [17][0][][] */ -23,-12,34,-53,-3,-15,-27,-13,89,-78,34,67,108,-68,-35,-127, 
  /* [18][0][][] */ 56,3,-36,-100,13,-27,109,-34,28,66,-3,79,-16,79,-11,-127, 
  /* [19][0][][] */ -25,-34,-21,-74,-113,42,-39,1,41,-18,16,-127,-1,-19,-16,-21, 
  /* [20][0][][] */ 4,79,72,-87,61,-18,-35,75,-85,-111,29,-64,-32,127,-7,-8, 
  /* [21][0][][] */ 30,-108,-127,-7,96,41,90,120,-102,-97,-32,8,113,-120,-20,22, 
  /* [22][0][][] */ 57,-11,81,-6,-6,6,64,26,26,127,38,35,-7,4,127,-6, 
  /* [23][0][][] */ -127,-76,-19,59,51,48,24,24,6,-7,4,-73,-11,78,56,115, 
  /* [24][0][][] */ 17,-13,8,46,-10,-127,13,-60,-3,111,-107,94,-31,-68,104,-68, 
  /* [25][0][][] */ 108,-69,82,127,18,-9,-39,39,-103,65,64,-27,-23,31,66,-14, 
  /* [26][0][][] */ -26,19,12,43,-59,107,-18,35,-60,-36,-79,28,1,20,39,-127, 
  /* [27][0][][] */ 46,-5,-10,-44,-46,15,-82,11,-109,-26,-68,-54,-82,37,-28,127, 
  /* [28][0][][] */ -66,17,17,-5,20,-6,-127,1,7,-30,8,-1,3,-45,-77,-25, 
  /* [29][0][][] */ -26,-119,-28,109,-30,12,127,0,86,60,-115,68,27,-35,-64,72, 
  /* [30][0][][] */ 51,-43,-62,17,-127,26,42,-23,18,0,8,-21,-26,48,-13,75, 
  /* [31][0][][] */ -127,-15,8,102,-45,13,-50,-7,-24,-57,20,-29,-33,-71,-29,97, 
  /* [32][0][][] */ -127,-80,-79,0,-91,-59,-1,-21,119,57,-58,-67,42,42,28,-15, 
  /* [33][0][][] */ -16,3,-100,31,-127,-92,57,9,-117,14,-48,-73,-20,101,68,64, 
  /* [34][0][][] */ 39,61,12,50,-60,-54,31,13,29,-127,-31,56,-26,-3,43,96, 
  /* [35][0][][] */ 42,11,-74,-6,-127,17,87,-28,31,49,-12,-7,16,71,27,66, 
  /* [36][0][][] */ 0,-5,-55,63,127,-14,33,71,-81,18,-86,-89,31,-27,1,23, 
  /* [37][0][][] */ -107,49,8,-64,54,-74,-35,-26,-7,-13,-35,46,66,-62,-2,-127, 
  /* [38][0][][] */ 39,94,50,-51,-83,-57,-127,-56,-22,-49,44,72,-51,-90,65,-20, 
  /* [39][0][][] */ -3,-47,2,70,16,61,61,-39,-30,53,16,-16,-15,127,52,103, 
  /* [40][0][][] */ 127,44,81,100,-68,-57,-1,-4,-80,68,-35,-32,-54,-38,104,-20, 
  /* [41][0][][] */ -13,2,18,47,-80,115,-3,41,-51,38,-118,8,25,21,55,-127, 
  /* [42][0][][] */ 1,-71,11,-20,127,37,73,25,-31,-94,-67,-15,-13,8,-14,67, 
  /* [43][0][][] */ -19,-65,-21,-3,120,17,-15,70,-57,-42,-127,-85,117,-21,-45,43, 
  /* [44][0][][] */ -20,-74,-77,-70,19,70,58,16,-28,-127,-57,62,-57,32,24,91, 
  /* [45][0][][] */ 2,-69,-67,-1,-127,66,-33,-56,51,-42,33,-53,-5,0,-40,51, 
  /* [46][0][][] */ 27,-72,-1,3,70,-80,-41,49,8,-14,21,47,-38,-48,28,-127, 
  /* [47][0][][] */ -115,-58,-32,97,-34,19,42,47,4,125,108,85,-74,85,-14,127, 
  /* [48][0][][] */ 39,-23,-89,-97,27,-72,16,52,40,-87,2,15,-66,19,-38,-127, 
  /* [49][0][][] */ 45,18,16,32,-11,-39,38,48,-32,127,-34,55,-31,-20,89,73, 
  /* [50][0][][] */ 4,-3,15,17,-127,-19,-11,-45,57,20,17,59,-19,-66,11,-6, 
  /* [51][0][][] */ 23,3,0,-127,-39,81,50,-57,21,8,31,-41,57,68,-15,1, 
  /* [52][0][][] */ 20,-14,-6,-63,82,-102,-14,-20,33,-1,127,-53,27,3,-32,99, 
  /* [53][0][][] */ -60,-77,47,-23,-48,-127,23,-109,1,86,-104,88,-44,-18,20,-109, 
  /* [54][0][][] */ 59,100,70,-26,-127,-53,-95,-121,-33,23,34,68,-57,-51,89,14, 
  /* [55][0][][] */ 15,16,-36,61,-20,31,38,-18,2,127,15,53,0,-5,2,41, 
  /* [56][0][][] */ 47,-96,-118,82,-34,64,17,89,119,41,56,77,-25,-29,61,127, 
  /* [57][0][][] */ 68,39,89,-87,74,-13,13,-12,87,-48,21,123,53,-91,127,-64, 
  /* [58][0][][] */ 74,-61,6,-66,26,15,-8,127,43,83,-3,66,42,19,84,-3, 
  /* [59][0][][] */ -42,53,39,-40,8,-113,-5,20,9,33,-127,-102,-126,-72,87,-16, 
  /* [60][0][][] */ 37,-25,22,15,15,-17,16,-53,42,127,-6,67,-9,-28,-22,-36, 
  /* [61][0][][] */ 76,42,7,-34,-96,-127,-23,-75,-74,-13,-26,21,-61,-56,98,87, 
  /* [62][0][][] */ -18,78,-42,50,-45,127,-52,29,-58,14,-42,35,-36,34,63,-87, 
  /* [63][0][][] */ 27,-17,-81,-127,-22,-41,80,-14,3,-105,-23,39,-45,83,29,-44, 
  /* [64][0][][] */ -50,-8,6,-16,30,-77,9,78,-127,-22,-65,-26,-41,87,51,55, 
  /* [65][0][][] */ -77,-11,-53,-23,65,42,-23,-70,-127,-67,1,-33,-127,94,-58,44, 
  /* [66][0][][] */ -14,53,-10,38,-50,127,-30,21,-65,20,-33,48,-31,55,42,-99, 
  /* [67][0][][] */ 29,-11,-41,-25,14,-101,80,-111,3,35,9,122,-66,-16,-44,-127, 
  /* [68][0][][] */ 3,-127,-24,72,2,6,17,74,22,39,57,10,-44,39,-12,-8, 
  /* [69][0][][] */ 25,78,81,-120,43,-3,-37,115,15,101,66,96,93,-96,44,-127, 
  /* [70][0][][] */ 38,15,36,-26,83,2,-94,-43,-127,-96,5,53,-41,66,-107,-2, 
  /* [71][0][][] */ -6,-51,41,-49,77,-15,21,16,-62,89,-127,-36,21,73,-12,33, 
  /* [72][0][][] */ -2,1,65,27,-74,-22,-106,-57,-9,49,-21,84,40,127,-123,-11, 
  /* [73][0][][] */ -7,-36,-15,-38,43,-108,31,-48,72,85,102,-6,27,-17,-73,127, 
  /* [74][0][][] */ 0,-1,-25,80,-81,-9,93,25,73,58,24,108,127,30,-59,12, 
  /* [75][0][][] */ -30,49,-21,34,-50,127,-23,18,-36,39,-48,55,-12,56,24,-78, 
  /* [76][0][][] */ -89,95,-40,45,-124,-11,-19,36,63,49,-56,-29,60,-50,-127,32, 
  /* [77][0][][] */ 118,127,-109,117,97,96,74,32,47,23,92,-50,82,18,68,18, 
  /* [78][0][][] */ 20,-38,1,-63,68,-123,32,-56,62,46,127,-21,5,-17,-42,127, 
  /* [79][0][][] */ -40,64,4,26,-1,-39,-30,-2,-127,-8,52,7,105,34,-87,-36, 
  /* [80][0][][] */ -75,35,114,20,102,60,-29,-127,-65,101,-84,-17,16,-98,16,44, 
  /* [81][0][][] */ 77,78,-16,2,42,-24,81,107,-109,127,-67,-47,-33,13,104,118, 
  /* [82][0][][] */ 52,111,-23,-54,8,-75,97,-98,33,48,-53,95,127,-3,68,-60, 
  /* [83][0][][] */ 2,-22,30,27,10,38,-27,-125,71,-34,106,7,49,-84,-65,-127, 
  /* [84][0][][] */ -124,-109,-40,-15,-4,92,87,1,105,82,106,127,68,95,-94,-10, 
  /* [85][0][][] */ 110,1,80,-57,73,-17,-30,82,11,119,-54,18,-46,65,127,18, 
  /* [86][0][][] */ -78,66,-40,1,31,84,14,13,88,40,127,-17,-29,57,-1,-24, 
  /* [87][0][][] */ 10,-56,28,-46,46,-127,29,-29,45,-9,59,-33,38,-37,-43,69, 
  /* [88][0][][] */ -85,81,57,-1,127,-18,46,17,-53,-70,97,-71,91,115,92,-120, 
  /* [89][0][][] */ -18,36,-15,32,-30,127,-28,32,-45,15,-40,23,-9,54,29,-93, 
  /* [90][0][][] */ 57,-101,32,23,121,-21,43,29,-4,-103,-127,-14,-16,4,-54,18, 
  /* [91][0][][] */ -14,85,-36,-16,-2,-94,-92,31,-86,10,-86,-127,-113,-81,-1,50, 
  /* [92][0][][] */ 69,53,71,36,-127,-100,12,0,-33,42,-27,-39,-16,-89,23,23, 
  /* [93][0][][] */ -29,-127,-99,63,-24,-53,-19,82,81,67,-5,67,-65,61,-26,-37, 
  /* [94][0][][] */ 112,14,127,-24,25,-39,10,37,24,94,-5,51,7,5,122,-10, 
  /* [95][0][][] */ -38,-26,-13,-11,127,9,27,65,-26,3,-88,-32,35,7,-67,29, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0062103495001792908, 0.0024425331503152847, 0.0041200267150998116, 0.0033247950486838818, 0.0024388926103711128, 0.0012333865743130445, 0.0034984915982931852, 0.0021550632081925869, 0.0017454683547839522, 0.0025287142489105463, 0.00095795822562649846, 0.0025227919686585665, 0.0030676587484776974, 0.0089112631976604462, 0.0027541553135961294, 0.0027254980523139238, 0.0044068428687751293, 0.0028426807839423418, 0.0050992839969694614, 0.0018313510809093714, 0.0042619183659553528, 0.0014665729831904173, 0.0033052777871489525, 0.0032670809887349606, 0.0019836984574794769, 0.0033333855681121349, 0.0029341655317693949, 0.0045143412426114082, 0.0029985054861754179, 0.004233174491673708, 0.0029517991933971643, 0.002345741493627429, 0.0042728492990136147, 0.0013196279760450125, 0.0026129200123250484, 0.0032248515635728836, 0.0024339139927178621, 0.0036263070069253445, 0.0023827997501939535, 0.0034949600230902433, 0.00099257659167051315, 0.0025900143664330244, 0.0027661120984703302, 0.0023640312720090151, 0.0025309384800493717, 0.0018669777782633901, 0.0023079731035977602, 0.0012333343038335443, 0.0047105830162763596, 0.0044824355281889439, 0.0035497837234288454, 0.0030550123192369938, 0.0030912260990589857, 0.0025559547357261181, 0.0016608715523034334, 0.0067240200005471706, 0.0027513538952916861, 0.0010684523731470108, 0.0025960628408938646, 0.0025567333213984966, 0.0036028916947543621, 0.0014479986857622862, 0.0029699148144572973, 0.0037116005551069975, 0.0011418837821111083, 0.0011147534241899848, 0.0033473456278443336, 0.0027268789708614349, 0.0021646001841872931, 0.0016883250791579485, 0.0040841568261384964, 0.0025233468040823936, 0.0026186250615864992, 0.0024688022676855326, 0.0033857135567814112, 0.0031166356056928635, 0.0047157262451946735, 0.0015503864269703627, 0.0024032446090131998, 0.0022498937323689461, 0.0018027020851150155, 0.0022931315470486879, 0.0022230071481317282, 0.0011566648026928306, 0.0020920713432133198, 0.0013407868100330234, 0.0025532359723001719, 0.0034493457060307264, 0.0038364075589925051, 0.0035310934763401747, 0.0030482795555144548, 0.0016292216023430228, 0.0030784644186496735, 0.0023308135569095612, 0.0018462594598531723, 0.002527700737118721, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -3923, 9919, -19623, 2544, 11102, -14751, -37245, -8761, -6441, 6395, -16086, -14175, 5728, -10749, -2172, -2805, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00015108937805052847, 0.00016999155923258513, 0.0001445224042981863, 0.00016086544201243669, 9.769294410943985e-05, 0.00018200893828179687, 9.2173664597794414e-05, 0.00015673150483053178, 9.5169620180968195e-05, 9.3443966761697084e-05, 0.00014835374895483255, 0.00015822093700990081, 0.0001256585237570107, 8.2126229244749993e-05, 0.00014348796685226262, 0.00013330763613339514, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 27,33,22,-35,73,64,-36,53,-13,111,0,38,-30,31,-10,47,30,75,43,-64,-74,78,-13,49,64,43,34,52,-50,-48,-7,84,-27,6,-66,52,53,-127,-38,19,15,-34,58,-1,-10,-49,-64,-19, 
  /* [1][0][][] */ -49,-4,-79,-42,14,90,-50,17,-7,-33,-46,38,62,-14,-25,-19,-34,-34,-3,17,-61,45,-107,-52,-49,-36,47,67,-20,-28,41,-38,15,-61,-32,54,12,-58,127,-30,-21,34,-48,-13,34,53,31,19, 
  /* [2][0][][] */ 1,3,57,-27,-17,-81,20,26,111,71,-64,6,109,-42,127,89,-71,-16,-36,27,86,-84,-32,-92,18,-39,42,-73,43,40,-37,25,34,-27,68,46,-71,8,3,-20,31,34,65,-18,23,-89,98,-55, 
  /* [3][0][][] */ 40,4,-24,-26,40,112,14,-24,40,-52,19,-24,-47,11,15,43,-51,-71,36,-127,-18,0,-32,-20,-38,93,125,66,-13,-33,31,39,62,-37,92,40,-45,-55,-8,47,27,7,-19,5,17,23,-14,-16, 
  /* [4][0][][] */ 102,-9,3,-47,89,90,49,12,73,-15,-104,41,48,-22,12,-13,-98,-121,-15,-97,-14,27,-46,-36,-76,127,-98,123,-62,-51,27,84,42,-56,16,-30,-8,13,-17,35,-52,-16,-8,60,-54,108,-29,-54, 
  /* [5][0][][] */ 5,-5,-59,0,-16,59,15,-26,65,58,35,95,55,-27,36,2,-45,127,-13,39,4,2,-68,-18,37,-7,-68,-39,-15,36,15,-19,-39,3,35,16,-42,3,-95,3,96,-25,31,49,-22,6,-43,34, 
  /* [6][0][][] */ 49,13,17,69,9,-30,102,-53,-9,62,126,95,33,51,-51,49,26,-37,-73,78,54,-67,-39,62,-94,92,82,-1,102,50,-25,-2,85,-57,-112,-16,89,36,6,-6,6,52,52,-29,61,127,33,-13, 
  /* [7][0][][] */ -102,1,-26,26,-64,-62,23,51,83,123,-63,-83,-106,15,-12,-17,-89,106,1,127,-59,46,24,48,-20,-102,-36,-90,23,48,-7,8,-23,11,19,-22,9,-65,124,16,10,37,27,-11,58,75,-36,-1, 
  /* [8][0][][] */ -13,-97,47,-59,63,-61,75,-34,-24,-120,30,19,-32,-4,25,37,6,3,-47,108,12,38,-16,27,76,-15,-63,-38,-127,-26,-63,-119,14,-68,-1,86,-4,32,122,17,11,5,76,119,-9,-73,-42,81, 
  /* [9][0][][] */ 17,-34,19,-54,37,77,-35,45,26,-40,-42,-17,12,-40,107,-10,-1,-106,40,38,-71,44,55,-34,-11,-71,-19,69,53,62,-40,-24,-41,28,-7,127,-32,-42,-56,-12,-25,0,28,108,46,76,-62,22, 
  /* [10][0][][] */ -18,19,-27,-7,24,29,-62,-40,42,40,66,-2,-30,-14,44,-56,-54,127,0,50,4,-13,16,27,-50,45,0,97,36,9,-33,-9,69,8,-9,23,-8,-46,-33,17,-85,1,31,-16,8,50,25,29, 
  /* [11][0][][] */ -37,41,-25,49,28,60,9,5,22,10,-127,-71,69,27,-10,-42,-1,33,-45,-54,-6,-12,112,7,52,14,-16,30,0,23,0,56,32,-6,-50,0,34,89,104,22,37,-21,59,4,-58,-17,92,5, 
  /* [12][0][][] */ -61,-10,31,18,-56,-50,3,5,-31,-29,-127,22,75,-96,22,39,41,98,84,-114,-33,43,-53,-84,3,-19,32,-31,7,23,-20,72,66,72,35,-32,-55,-29,31,6,-28,17,58,-2,34,-15,-35,-32, 
  /* [13][0][][] */ -53,-110,-52,-96,4,29,60,8,-117,23,126,-69,47,52,127,-2,109,28,-1,-100,77,-79,120,8,-86,9,-29,9,-41,-98,-103,17,39,-40,-71,58,27,-52,77,-73,-3,50,69,55,54,-25,98,-67, 
  /* [14][0][][] */ 69,17,-48,2,-40,11,-80,-24,-24,54,46,43,-13,-66,15,-37,48,-118,22,14,79,-51,27,-10,-1,119,-88,-1,-54,-31,-94,0,127,42,82,-15,-73,4,-28,66,-10,-44,100,-24,-53,-51,-59,58, 
  /* [15][0][][] */ -66,17,39,18,98,5,-2,34,16,81,-19,54,53,-11,-34,-24,6,38,5,-34,22,-36,-53,-52,52,-63,-39,67,-34,14,15,5,-64,-2,127,-3,-89,16,57,-7,-47,-29,25,-2,-41,-31,-14,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0064212987199425697, 0.0072246412746608257, 0.0061422018334269524, 0.0068367812782526016, 0.0041519501246511936, 0.0077353795059025288, 0.0039173807017505169, 0.0066610886715352535, 0.0040447087958455086, 0.0039713685400784016, 0.0063050342723727226, 0.006724389735609293, 0.0053404872305691242, 0.0034903646446764469, 0.0060982387512922287, 0.0056655742228031158, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13263, -336, 20558, 53, 15891, -2238, 37523, 470, 10786, 43653, 5460, 23533, -1234, 14360, 37606, 22894, -641, 5830, 2472, 53639, -352, 19554, 1330, 17124, 18448, 30319, 679, -405, -4514, 13219, 22850, -128, 1464, 1973, 1621, 17293, 8400, 28346, 2816, 16307, 28676, -1312, 575, 18235, 758, 2371, 40722, 26690, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.4082250648643821e-05, 0.00010850492253666744, 5.868173684575595e-05, 9.7325159003958106e-05, 0.00010480421042302623, 8.5325169493444264e-05, 5.3227078751660883e-05, 0.0003251523885410279, 0.00010585017298581079, 4.4458811316872016e-05, 5.5677268392173573e-05, 9.9984667031094432e-05, 8.5167317593004555e-05, 0.00010173225746257231, 4.5856573706259951e-05, 8.2919061242137104e-05, 0.00010624525748426095, 5.1444945711409673e-05, 0.00015732762403786182, 3.9943159208633006e-05, 7.0906629844103009e-05, 5.608547871815972e-05, 9.9639342806767672e-05, 0.00012939523730892688, 6.733516784152016e-05, 8.0123936641030014e-05, 5.9159370721317828e-05, 4.482937220018357e-05, 0.0002175868721678853, 0.00010274415399180725, 6.5652704506646842e-05, 0.00025217817164957523, 9.5799434348009527e-05, 0.00019731870270334184, 7.8150223998818547e-05, 7.9140889283735305e-05, 8.7250627984758466e-05, 6.3243205659091473e-05, 8.2677601312752813e-05, 0.00010215349175268784, 5.1343424274818972e-05, 0.00019583747780416161, 0.00031039194436743855, 6.2186874856706709e-05, 0.00014563369040843099, 6.0328959079924971e-05, 4.8444442654727027e-05, 5.2906703785993159e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -94,68,-127,90,-88,56,-68,74,-79,-70,63,-58,86,-108,-53,-61,92,74,86,-103,85,-119,77,-104,-87,-49,68,124,-101,-39,-92,64,80,-87,61,-127,-68,-127,92,-54,-25,-77,109,-110,112,59,-69,-60, -114,98,-101,103,-77,120,-61,78,-117,-93,98,-72,105,-118,-59,-87,109,113,127,-127,111,-121,88,-127,-127,-85,72,127,26,-66,-115,82,85,-127,90,-120,-91,-106,114,-74,-109,99,127,-89,-34,96,-81,-89, -50,46,-24,33,-21,63,-35,29,-51,-35,40,-28,29,-52,-22,-8,49,58,68,-33,42,-74,54,-49,-87,-37,21,36,96,-35,-70,33,31,-81,37,-46,-31,-31,46,-55,-121,-17,40,-53,-79,60,-21,-70, 
  /* [0][1][][] */ -99,85,-72,107,-90,91,-122,90,-123,-96,87,-83,95,-114,-97,-95,99,89,-44,-114,109,-127,96,-83,-96,-83,101,103,-127,-76,-98,86,106,23,87,-102,-103,-112,102,-78,-108,-95,99,-124,127,56,-117,-100, -127,127,-105,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-45,-123,127,-113,127,-96,-120,-127,127,97,28,-127,-127,127,127,37,127,-98,-127,-113,127,-127,-127,127,102,-113,-67,127,-127,-127, -72,80,-84,45,-50,39,-50,65,-38,-47,58,-56,55,-64,-53,-10,61,64,-37,-37,30,-57,49,-48,-115,-47,43,42,122,-70,-84,56,66,13,50,-35,-34,-19,52,-56,-71,-55,33,-99,-105,80,-35,-68, 
  /* [0][2][][] */ -36,35,7,66,-39,52,-55,25,-52,-47,33,-47,27,-60,-48,-53,52,36,-74,-30,25,-51,47,-32,-46,-33,45,6,-76,-44,-35,60,53,42,52,-76,-38,-40,31,-49,-94,-45,37,-102,80,25,-66,-63, -56,61,-78,81,-59,46,-78,44,-64,-46,50,-72,43,-86,-73,-44,67,47,-88,-30,34,-41,55,-54,-56,-54,56,24,17,-74,-65,56,51,49,51,-62,-50,-32,31,-54,-41,79,46,-127,-37,62,-71,-84, -26,29,-74,24,-29,7,-29,33,-26,-22,24,-30,25,-37,-38,7,42,24,-67,2,4,-2,30,-24,-60,-7,27,7,83,-21,-24,32,28,39,18,-34,-7,15,21,-7,0,-23,4,-57,-47,53,-23,-51, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0031484956853091717, 0.004611459095031023, 0.0024939738214015961, 0.0041363192722201347, 0.0044541787356138229, 0.0036263195797801018, 0.0022621508687734604, 0.01381897646933794, 0.0044986321590840816, 0.0018894994864240289, 0.0023662839084863663, 0.0042493483051657677, 0.0036196107976138592, 0.0043236208148300648, 0.0019489043625071645, 0.0035240598954260349, 0.0045154234394431114, 0.002186410129070282, 0.0066864239051938057, 0.0016975842881947756, 0.0030135316774249077, 0.0023836328182369471, 0.0042346720583736897, 0.0054992977529764175, 0.0028617444913834333, 0.0034052673727273941, 0.0025142731610685587, 0.0019052482675760984, 0.0092474417760968208, 0.0043666264973580837, 0.0027902398724108934, 0.010717571713030338, 0.004071475937962532, 0.0083860447630286217, 0.0033213845454156399, 0.0033634877763688564, 0.0037081516347825527, 0.0026878362987190485, 0.0035137978848069906, 0.0043415231630206108, 0.0021820955444127321, 0.008323092944920063, 0.013191657140851021, 0.002642942126840353, 0.0061894319951534271, 0.0025639806408435106, 0.0020588887855410576, 0.0022485349327325821, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2457, -1297, 1015, -1961, 5147, -785, 4610, -4382, 1051, 522, 1634, 4110, 430, -324, 861, 4899, -1707, 4166, 6034, 878, -787, 2095, -998, 3808, 2753, 1836, 1243, -923, 9079, -389, 2569, -2158, -774, 4427, -757, 2466, 2110, 1024, 407, 4229, 2490, 8820, -3866, 1597, 7337, 60, 3375, 2695, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00019203306874260306, 0.00027196123846806586, 0.0002317425241926685, 0.0002079099795082584, 0.00015661759243812412, 0.00017792369180824608, 0.00016425926878582686, 0.00012943589536007494, 0.00026323026395402849, 0.00025518517941236496, 0.00021115473646204919, 0.00017849920550361276, 0.00033769450965337455, 0.0002616043493617326, 0.00024481557193212211, 0.0001655706437304616, 0.00024497800040990114, 0.00018267038103658706, 0.00014899809320922941, 0.00027218586183153093, 0.00026544806314632297, 0.00023159070406109095, 0.00019787355267908424, 0.00020373433653730899, 0.00018315888883080333, 0.00020431136363185942, 0.00025252913474105299, 0.00023968788445927203, 0.00010551686864346266, 0.00028264508000575006, 0.00018191842536907643, 0.00015388651809189469, 0.00018606444064062089, 0.00018233487207908183, 0.00024422651040367782, 0.00020835231407545507, 0.00021702388767153025, 0.00024477325496263802, 0.00019494465959724039, 0.00017650943482294679, 0.00022422420443035662, 9.9548771686386317e-05, 0.0001397306623402983, 0.00026474473997950554, 0.00011579491547308862, 0.00024613935966044664, 0.00017703606863506138, 0.00021549827943090349, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 64,29,127,-35,59,101,-75,-57, 
  /* [1][0][][] */ 14,-81,-127,9,50,20,28,3, 
  /* [2][0][][] */ -127,-11,-54,-31,56,21,-73,-43, 
  /* [3][0][][] */ 43,88,127,-77,-6,-127,-13,-4, 
  /* [4][0][][] */ -127,19,-51,-32,48,9,-41,-58, 
  /* [5][0][][] */ -101,26,-58,-13,6,32,-77,-127, 
  /* [6][0][][] */ -30,-127,-117,40,92,7,5,39, 
  /* [7][0][][] */ -66,-127,-95,-81,-71,-68,19,88, 
  /* [8][0][][] */ 80,31,-8,-3,92,-70,-127,9, 
  /* [9][0][][] */ -35,52,-59,87,-61,-43,127,-33, 
  /* [10][0][][] */ -21,122,37,72,127,-23,-12,62, 
  /* [11][0][][] */ -86,-29,-27,-12,-84,97,127,-7, 
  /* [12][0][][] */ 58,38,-127,29,-7,-25,-64,-11, 
  /* [13][0][][] */ 66,-42,-86,9,12,-127,-30,-32, 
  /* [14][0][][] */ 11,-71,67,18,127,-98,-68,26, 
  /* [15][0][][] */ -34,-44,1,127,61,82,-75,24, 
  /* [16][0][][] */ 108,29,-31,25,79,-108,-127,-19, 
  /* [17][0][][] */ 58,127,52,77,46,64,24,-81, 
  /* [18][0][][] */ 29,-7,-1,0,127,0,18,-12, 
  /* [19][0][][] */ 11,127,32,15,-116,16,21,-33, 
  /* [20][0][][] */ -43,21,70,-127,27,34,-21,114, 
  /* [21][0][][] */ -35,67,31,-127,24,57,-13,113, 
  /* [22][0][][] */ -72,-62,-86,26,-118,127,110,-26, 
  /* [23][0][][] */ 96,23,-127,15,9,-39,-66,-27, 
  /* [24][0][][] */ -48,39,11,4,-18,80,-127,117, 
  /* [25][0][][] */ -103,-59,-127,9,-56,-67,70,104, 
  /* [26][0][][] */ 46,-8,-33,-27,99,-12,127,-31, 
  /* [27][0][][] */ 127,-63,21,90,-2,27,-18,86, 
  /* [28][0][][] */ 45,59,41,-12,127,-56,53,-26, 
  /* [29][0][][] */ -13,-8,-23,-40,-67,15,127,-34, 
  /* [30][0][][] */ 37,-127,-53,-64,-111,2,13,-54, 
  /* [31][0][][] */ 8,33,-3,-12,-127,3,-33,-9, 
  /* [32][0][][] */ 40,-53,-53,81,-2,-83,113,-127, 
  /* [33][0][][] */ 59,127,38,38,67,-28,-31,-20, 
  /* [34][0][][] */ -112,-42,127,-2,-18,91,98,5, 
  /* [35][0][][] */ -34,88,127,-20,-73,-89,-51,37, 
  /* [36][0][][] */ -96,3,104,-23,-14,127,84,23, 
  /* [37][0][][] */ -18,-79,2,-127,-46,-79,70,42, 
  /* [38][0][][] */ 44,-14,95,-63,53,58,-127,4, 
  /* [39][0][][] */ -22,107,-127,-51,-21,6,2,91, 
  /* [40][0][][] */ 66,-51,22,32,10,3,5,127, 
  /* [41][0][][] */ -31,92,127,2,10,79,-79,27, 
  /* [42][0][][] */ 59,-127,-101,-25,-117,3,15,-91, 
  /* [43][0][][] */ -10,-78,31,-66,127,-37,16,43, 
  /* [44][0][][] */ 1,117,127,24,0,62,-63,-4, 
  /* [45][0][][] */ -35,42,16,89,-118,57,-127,17, 
  /* [46][0][][] */ -38,-48,57,47,-125,-127,-28,-4, 
  /* [47][0][][] */ -12,47,39,-99,-127,40,-21,56, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023194444365799427, 0.0032848455011844635, 0.0027990695089101791, 0.0025112114381045103, 0.0018916836706921458, 0.0021490263752639294, 0.0019839825108647346, 0.00156337337102741, 0.00317938975058496, 0.0030822183471173048, 0.0025504028890281916, 0.0021559775341302156, 0.0040787956677377224, 0.0031597514171153307, 0.0029569703619927168, 0.0019998217467218637, 0.0029589324258267879, 0.0022063585929572582, 0.0017996525857597589, 0.003287558676674962, 0.0032061771489679813, 0.0027972357347607613, 0.0023899879306554794, 0.0024607765953987837, 0.0022122589871287346, 0.0024677461478859186, 0.0030501375440508127, 0.0028950364794582129, 0.0012744707055389881, 0.0034138890914618969, 0.0021972761023789644, 0.0018586966907605529, 0.0022473533172160387, 0.0022023061756044626, 0.0029498555231839418, 0.0025165542028844357, 0.0026212926022708416, 0.0029564592987298965, 0.0023546116426587105, 0.0021319445222616196, 0.0027082606684416533, 0.0012023858726024628, 0.0016877171583473682, 0.0031976823229342699, 0.0013986126286908984, 0.0029729597736150026, 0.0021383052226155996, 0.0026028656866401434, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 546, -500, 23633, -5758, 4098, -15549, 2834, -14516, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.0636756794992834e-05, 0.00010829570237547159, 0.00013555407349485904, 0.00012111286196159199, 0.00012221404176671058, 0.00010539556387811899, 8.0835212429519743e-05, 6.9731970143038779e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -44,-44,-13,-62,2,-6,93,77,-97,-80,-28,8,-52,-5,-61,31,-70,13,26,127,60,-27,27,87,69,82,25,3,-83,-63,-79,-57,-55,103,33,-54,32,-24,88,-8,25,10,3,-96,39,-32,-27,-84, 
  /* [1][0][][] */ -9,54,-23,-32,-77,70,-26,-47,-30,65,-21,14,56,45,-48,1,-20,-114,79,-51,127,5,-57,29,58,-1,-79,59,39,-4,68,26,-22,-12,8,-15,-4,100,-16,-22,56,32,-6,10,108,14,-26,60, 
  /* [2][0][][] */ -22,-32,114,-2,80,-45,-18,25,-31,-8,-19,39,4,-40,-51,-127,-56,-98,-27,16,-100,22,-42,-27,-49,11,-5,-50,-42,16,-34,-18,7,-4,28,-4,23,-35,-50,10,38,-36,28,-49,-41,-49,-60,-48, 
  /* [3][0][][] */ 48,15,57,14,12,-35,33,70,-52,-32,38,-19,-63,52,-16,54,69,30,-30,26,-99,-68,127,0,8,7,-55,-27,-56,63,111,-64,8,-113,-18,41,-11,-72,-7,73,-81,-59,56,-3,-95,-62,60,2, 
  /* [4][0][][] */ 20,-18,73,-31,5,-8,-5,-2,-58,-8,-25,4,47,-69,39,-97,47,45,-5,-31,13,31,24,14,5,1,59,-19,24,22,-127,-18,-21,-17,9,14,48,-3,36,4,-40,-17,-73,28,-20,-100,3,25, 
  /* [5][0][][] */ 27,-48,68,36,37,6,24,9,-79,-17,-51,26,33,7,8,-46,97,83,-6,-21,98,-56,127,-97,-24,45,2,51,14,18,-42,-51,-18,-49,-44,14,40,29,72,2,-79,30,39,33,58,-16,88,1, 
  /* [6][0][][] */ -45,60,-127,88,49,19,31,17,-16,-10,57,-86,-98,-19,-30,30,-120,27,-8,100,25,48,-97,-95,-8,-21,17,81,-25,-29,-52,4,40,72,-51,-23,-16,-5,89,9,75,66,-125,-65,-32,117,-50,-43, 
  /* [7][0][][] */ 39,70,-82,10,12,64,121,80,47,72,-104,-7,-50,8,-73,-48,33,42,121,108,88,1,127,37,113,93,-45,94,-70,44,3,-85,25,-64,-23,18,3,100,-66,83,-61,41,-6,-86,82,-29,59,-33, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0038520621601492167, 0.0046025672927498817, 0.005761047825217247, 0.0051472964696586132, 0.0051940968260169029, 0.0044793114066123962, 0.003435496473684907, 0.0029636085964739323, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 688, 10682, -860, -1247, 1694, -1303, 1511, -4862, -3636, 399, -7039, -140, 1328, -879, -2464, 3241, 7468, 3056, -175, -4439, -6788, 39, 18672, -4773, -4163, -1377, 5149, -7060, 742, -409, -7170, 10416, 5759, 24, 3094, -386, -83, -244, 8568, -1572, 6301, -3141, 4265, 6677, -341, 10767, 78, -1687, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026514846831560135, 0.00013961573131382465, 0.00081909430446103215, 0.00022790532966610044, 0.00021787737205158919, 0.00034805119503289461, 0.00027881853748112917, 0.00033623195486143231, 9.6984156698454171e-05, 0.00027387758018448949, 0.00021312717581167817, 0.0018753831973299384, 0.00044513976899906993, 0.00061126553919166327, 0.00043343502329662442, 0.00077514490112662315, 0.00016869722458068281, 6.4040461438708007e-05, 0.00023844811948947608, 0.00030978518771007657, 0.00026755649014376104, 0.00026053711189888418, 7.9276345786638558e-05, 0.00047035279567353427, 0.00018283874669577926, 0.00042655941797420382, 0.0004532470484264195, 0.00019088097906205803, 0.0002954936062451452, 0.00035608370671980083, 0.00013831446995027363, 0.000109362110379152, 0.000118496514915023, 0.00023609814525116235, 0.00015894233365543187, 0.00032090448075905442, 0.0026094382628798485, 0.00034858292201533914, 0.00018111307872459292, 0.00017828840645961463, 0.00017353505245409906, 0.00013412591943051666, 0.00029820535564795136, 0.00018533963884692639, 0.00033326071570627391, 8.3460850873962045e-05, 6.5741900471039116e-05, 0.00017435303016100079, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-49,10,13,-20,-82,-40,74,-49,-13,-4,6,44,-7,-12,7,103,2,36,7,3,-32,-68,15,4,-14,-10,-22,-69,64,-25,-121,47,-5,-50,-47,-6,-35,8,-14,-6,43,7,-5,-13,66,127,-9, -127,-90,-22,127,-69,53,-94,127,22,10,20,-1,51,17,4,-40,-24,47,17,10,13,127,23,127,127,-27,-50,39,65,-120,-16,-64,64,-4,-33,-115,30,7,-48,-39,-121,0,-86,-127,32,59,56,127, -15,-9,12,12,-25,32,38,40,4,-37,1,5,-24,-3,1,6,-57,28,-74,-26,-10,-30,127,17,-37,9,8,-13,13,36,1,11,-4,-18,-33,74,9,1,26,62,33,-14,22,-40,-12,37,-23,-9, 
  /* [0][1][][] */ -18,-27,-27,5,25,-80,127,-55,-20,1,24,39,127,16,1,-30,-28,-31,38,46,66,-72,43,11,-52,127,-79,-6,127,-90,40,-127,-38,3,-71,14,15,-65,-43,10,123,127,7,-116,-64,-65,-7,100, 91,-127,127,6,127,67,-66,-42,28,127,127,-127,-101,127,127,127,127,127,109,127,127,125,6,9,111,-95,-127,127,35,127,127,7,-127,127,127,127,-127,127,-127,-98,40,43,-127,-42,127,-127,-17,87, 17,26,-38,2,-55,127,-113,78,116,-79,19,67,-42,10,12,-62,13,14,-127,17,19,-122,-44,-1,78,-8,-17,120,-80,-27,27,-66,-32,11,96,-20,45,-7,-2,-71,107,6,26,35,-60,88,92,-83, 
  /* [0][2][][] */ -10,27,7,-26,-5,-45,-12,5,-2,-3,0,6,-20,-15,-3,0,-60,22,15,-35,-1,-18,83,-10,-95,6,42,-12,5,5,-5,35,-11,-10,-60,29,4,-13,18,50,-31,-1,4,8,-18,8,-17,20, 38,-16,-34,-31,23,41,115,-69,127,-36,-1,11,-79,-22,-23,-67,-31,111,13,28,11,42,-28,-30,-66,58,82,-5,-103,15,-37,-21,-22,-9,-34,-2,61,-27,1,127,-127,-7,-16,53,35,45,2,-125, -6,31,5,-13,-19,10,-5,-34,-25,-24,-6,8,13,-12,-15,15,39,46,-24,-16,-7,-20,-51,-11,31,-22,27,-5,-22,7,-18,5,23,-21,-23,-43,-4,4,28,20,-20,-16,1,11,-19,12,52,-56, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.01126880943775177, 0.005933668464422226, 0.034811507910490036, 0.009685976430773735, 0.0092597883194684982, 0.014792175963521004, 0.011849787086248398, 0.014289857819676399, 0.004121826495975256, 0.011639797128736973, 0.0090579045936465263, 0.079703785479068756, 0.018918439745903015, 0.025978785008192062, 0.018420988693833351, 0.032943658530712128, 0.0071696317754685879, 0.0027217194437980652, 0.010134045034646988, 0.013165870681405067, 0.011371150612831116, 0.011072826571762562, 0.003369244746863842, 0.019989993423223495, 0.0077706463634967804, 0.018128775060176849, 0.019262999296188354, 0.008112441748380661, 0.012558477930724621, 0.015133557841181755, 0.0058783646672964096, 0.0046478896401822567, 0.0050361016765236855, 0.010034170933067799, 0.0067550493404269218, 0.01363843958824873, 0.1109011247754097, 0.014814774505794048, 0.0076973056420683861, 0.0075772572308778763, 0.0073752393946051598, 0.005700351670384407, 0.012673727236688137, 0.0078769344836473465, 0.014163579791784286, 0.0035470861475914717, 0.0027940305881202221, 0.0074100038036704063, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2564, 4671, 14679, 1189, 2198, -1796, 6000, 16450, 5317, -828, 4679, -2692, 19137, -1615, 2388, 22526, -564, 2104, 51, 3063, 3276, 4330, 587, 23438, 5456, 4102, 13844, 1486, 6820, 4924, 548, 1141, 698, 1581, -325, 247, -3749, -593, 3889, 2041, 5017, 1980, 5267, 6068, 4252, 2719, 2122, 6730, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0002369514259044081, 0.00017713810666464269, 6.434749229811132e-05, 0.00023039475490804762, 0.0002353336603846401, 0.00023071907344274223, 0.00013064047379884869, 5.8805391745408997e-05, 0.00010757883865153417, 0.00022972784063313156, 0.00017145535093732178, 0.00019005367357749492, 5.0981110689463094e-05, 0.00024831364862620831, 0.00020435286569409072, 4.8236812290269881e-05, 0.00025564534007571638, 0.00019810882804449648, 0.00028963334625586867, 0.00019541836809366941, 0.00021154896239750087, 0.00017876109632197767, 0.00031721443519927561, 4.6221830416470766e-05, 0.00014985274174250662, 0.00014154661039356142, 7.3330476880073547e-05, 0.0002532624639570713, 0.00011618122516665608, 0.00015722648822702467, 0.00051612616516649723, 0.00035359716275706887, 0.00028362625744193792, 0.0002314752055099234, 0.00028552726143971086, 0.00028140746871940792, 0.00016460604092571884, 0.00028141657821834087, 0.0001615762448636815, 0.00023177637194748968, 0.0001590373576618731, 0.00025405146880075336, 0.00016130304720718414, 0.00013427443627733737, 0.00017410978034604341, 0.00026316521689295769, 0.00029534849454648793, 0.00012505080667324364, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 51,127,-64,-87,7,81,14,69, 
  /* [1][0][][] */ 57,-74,47,-127,-51,69,-89,-43, 
  /* [2][0][][] */ -27,127,127,51,111,0,54,8, 
  /* [3][0][][] */ 106,44,-84,63,0,-99,-127,-32, 
  /* [4][0][][] */ -49,38,19,-68,-35,113,127,51, 
  /* [5][0][][] */ 18,81,-127,-79,52,101,37,-30, 
  /* [6][0][][] */ -16,127,62,46,73,15,23,-93, 
  /* [7][0][][] */ 127,-20,-35,34,28,5,106,13, 
  /* [8][0][][] */ 61,127,60,92,117,91,109,-96, 
  /* [9][0][][] */ 62,122,-127,-103,21,113,6,90, 
  /* [10][0][][] */ -70,-47,16,-54,-8,-36,-56,127, 
  /* [11][0][][] */ 17,-115,-127,-23,24,-11,37,-9, 
  /* [12][0][][] */ -15,-127,-106,-16,-123,43,-52,36, 
  /* [13][0][][] */ -15,15,-99,103,-127,-32,1,-9, 
  /* [14][0][][] */ -73,-42,-127,-4,47,-9,-8,-64, 
  /* [15][0][][] */ 12,-105,-127,10,-89,-21,-37,-2, 
  /* [16][0][][] */ 127,-66,-14,64,-80,23,30,106, 
  /* [17][0][][] */ -26,108,127,-31,-57,-12,-26,-33, 
  /* [18][0][][] */ 13,-127,50,72,3,-63,51,-72, 
  /* [19][0][][] */ 127,-39,-58,39,-100,1,39,107, 
  /* [20][0][][] */ -29,-127,83,75,-12,-87,1,-72, 
  /* [21][0][][] */ -7,-54,-20,-42,127,-9,55,21, 
  /* [22][0][][] */ -127,24,-70,45,49,52,-86,-109, 
  /* [23][0][][] */ -103,-60,54,-18,-123,126,127,-60, 
  /* [24][0][][] */ -45,58,-8,-50,-47,127,104,4, 
  /* [25][0][][] */ -50,-104,-127,-53,-59,-12,-27,-47, 
  /* [26][0][][] */ -15,59,-11,127,-101,47,-51,-1, 
  /* [27][0][][] */ 23,-127,37,81,19,-54,3,-120, 
  /* [28][0][][] */ 25,127,73,58,107,-28,15,-58, 
  /* [29][0][][] */ 96,28,-42,-10,79,-127,-89,20, 
  /* [30][0][][] */ 25,-5,34,-127,20,-27,17,-25, 
  /* [31][0][][] */ 51,-42,4,65,-12,31,10,127, 
  /* [32][0][][] */ -96,-70,19,-62,-65,127,66,118, 
  /* [33][0][][] */ -35,48,41,-39,38,127,-110,74, 
  /* [34][0][][] */ 21,127,-72,-48,22,40,-69,63, 
  /* [35][0][][] */ 12,-127,37,62,-30,-71,39,-88, 
  /* [36][0][][] */ -15,-34,-81,-9,-127,-54,-15,9, 
  /* [37][0][][] */ -48,-127,78,85,-40,-99,-16,-39, 
  /* [38][0][][] */ -75,20,64,-78,-127,-90,-58,90, 
  /* [39][0][][] */ 75,-127,82,51,-19,-79,-19,-81, 
  /* [40][0][][] */ -1,52,18,46,-127,-18,-61,15, 
  /* [41][0][][] */ 106,127,-73,-103,54,21,-8,20, 
  /* [42][0][][] */ -10,-42,-15,12,127,18,55,21, 
  /* [43][0][][] */ 127,32,93,26,-73,-24,69,112, 
  /* [44][0][][] */ 55,47,-12,15,69,-107,-127,28, 
  /* [45][0][][] */ 46,15,19,19,73,-127,-9,-51, 
  /* [46][0][][] */ 65,-40,-10,127,39,53,18,69, 
  /* [47][0][][] */ -82,-91,44,77,-57,20,127,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0035609547048807144, 0.0026620677672326565, 0.00096702732844278216, 0.0034624196123331785, 0.0035366425290703773, 0.0034672936890274286, 0.0019632917828857899, 0.0008837394998408854, 0.0016167168505489826, 0.003452397184446454, 0.0025766661856323481, 0.002856165636330843, 0.00076615461148321629, 0.0037317085079848766, 0.0030710569117218256, 0.00072491273749619722, 0.0038418907206505537, 0.0029772201087325811, 0.0043526692315936089, 0.0029367874376475811, 0.0031792011577636003, 0.0026864584069699049, 0.0047671636566519737, 0.00069463113322854042, 0.0022520178463310003, 0.0021271915175020695, 0.0011020255042240024, 0.0038060802035033703, 0.0017459952505305409, 0.002362831961363554, 0.0077564502134919167, 0.0053139305673539639, 0.004262393806129694, 0.0034786569885909557, 0.0042909621261060238, 0.0042290491983294487, 0.0024737333878874779, 0.0042291861027479172, 0.0024282010272145271, 0.0034831829834729433, 0.0023900461383163929, 0.0038179378025233746, 0.0024240952916443348, 0.0020179038401693106, 0.0026165575254708529, 0.0039549008943140507, 0.0044385576620697975, 0.0018792892806231976, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7523, 15126, -4313, 6404, -1216, 4702, -10838, -18924, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022009160602465272, 0.00012355804210528731, 0.00014494755305349827, 0.00014221650781109929, 0.00019402468751650304, 0.00015581244952045381, 0.00020810104615520686, 0.00013395262067206204, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -46,-2,29,13,-28,-13,9,7,-43,-4,-63,-57,-24,-61,-9,-30,48,-41,37,42,-14,33,-37,14,-1,-39,56,-16,-6,-19,18,8,81,34,36,-127,19,-2,-16,-34,9,-16,46,49,37,6,28,3, 
  /* [1][0][][] */ -2,34,61,-27,-12,47,-50,-30,3,21,-18,-89,12,90,-19,58,-18,20,-23,-55,9,-80,-30,25,-68,-14,-4,-113,-27,-16,26,-58,44,77,-43,5,127,-24,2,49,-33,42,-84,-31,114,-20,-33,-22, 
  /* [2][0][][] */ 0,-19,-63,16,-2,42,25,2,-12,39,-5,26,67,-94,18,-60,35,-89,25,35,-25,54,-9,28,-18,56,-21,-68,14,2,23,-74,-44,-85,32,-33,108,27,-11,-56,-8,30,77,25,127,15,22,21, 
  /* [3][0][][] */ -10,26,-64,41,13,-36,-70,-100,11,-23,-36,4,5,23,35,76,-8,14,-36,27,11,-100,28,-58,-67,-10,127,-14,-44,2,-68,18,1,-77,14,-15,-23,-40,-22,99,-41,-38,2,15,37,5,-39,42, 
  /* [4][0][][] */ -25,-47,-6,7,30,-29,-11,-8,26,-30,58,-76,4,29,10,12,-16,-23,13,-12,-4,-49,4,-18,16,-8,40,48,31,20,-14,25,-10,-1,1,-2,-69,83,35,-24,27,-21,-20,-23,-75,11,127,11, 
  /* [5][0][][] */ 40,-16,-1,14,24,-43,30,-127,30,-26,-13,115,-78,66,17,-64,0,-94,15,6,-44,62,-33,-48,-59,79,-24,0,-19,51,-44,-34,26,57,34,-1,-38,-8,-48,-43,12,-40,-46,-7,-31,52,90,19, 
  /* [6][0][][] */ 50,-20,23,-9,-38,-21,-39,16,-42,2,-38,127,-42,-37,-5,59,8,43,15,32,41,-83,-18,18,22,37,-61,5,9,-39,13,37,7,13,-16,-5,11,2,-5,-7,-11,-13,40,53,-4,-35,73,-16, 
  /* [7][0][][] */ -23,5,-8,69,34,29,10,29,21,3,65,-3,117,104,56,45,43,49,-12,8,17,-16,-90,-25,14,-2,-27,65,32,-25,-28,-19,33,6,34,-92,-70,36,45,57,-32,35,80,127,-58,-25,-104,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0093538928776979446, 0.0052512167021632195, 0.0061602708883583546, 0.0060442015528678894, 0.0082460492849349976, 0.0066220290027558804, 0.008844294585287571, 0.0056929863058030605, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 12352, 4837, 4405, 208, 2560, -1117, -422, 33613, -1770, 2559, 8326, 53966, 2469, 3866, 370, 12954, -1633, 12182, 133, 6862, 13936, 132, 4239, -8984, 9359, 1693, 2774, 12713, 1675, -542, -9203, 11563, 3894, 1160, -1723, 4207, -8686, 7445, -1781, 17330, -1509, -2124, 5297, 697, 1340, 925, 937, -463, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.8303026384674013e-05, 0.00011870626622112468, 0.00017522260895930231, 0.00015591899864375591, 0.00055955292191356421, 0.00015879672719165683, 0.00014119000115897506, 8.4327395597938448e-05, 0.00011255769641138613, 8.2646649389062077e-05, 6.3509127357974648e-05, 5.70639967918396e-05, 8.1043421232607216e-05, 7.0162794145289809e-05, 0.00019705170416273177, 0.00012172212154837325, 0.00013486086390912533, 0.00039719414780847728, 0.00014396870392374694, 0.00016571828746236861, 0.0001254773378605023, 0.00033259711926802993, 0.0001532394380774349, 0.00028365373145788908, 0.00015231224824674428, 7.4842755566351116e-05, 5.7053792261285707e-05, 9.4463488494511694e-05, 0.00014909228775650263, 0.0010494734160602093, 0.00026626879116520286, 7.658611866645515e-05, 0.00010183390259044245, 0.00014899733650963753, 0.00016750460781622678, 6.1235783505253494e-05, 9.7011747129727155e-05, 4.9882568418979645e-05, 0.00011754977458622307, 6.9117719249334186e-05, 0.00015091705427039415, 0.00016787317872513086, 7.447101961588487e-05, 9.3658476544078439e-05, 7.400594768114388e-05, 0.00037626843550242484, 6.513039261335507e-05, 0.00019439485913608223, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -51,-83,-16,-22,127,-59,67,-63,-87,-79,-24,-47,122,34,58,-127,60,-19,4,-38,-85,90,-3,13,-21,79,54,-30,73,-74,17,-50,-115,-87,49,74,24,82,121,-59,-127,-11,33,79,49,-127,89,87, -43,-127,-69,58,-89,105,61,-68,-68,40,78,-102,127,88,91,-79,-75,-80,36,-60,-87,94,-61,110,-85,101,74,-127,91,-51,0,-126,-54,-81,83,126,117,112,127,-57,-127,-64,60,107,85,99,92,81, 21,-46,-68,105,-56,-22,19,-12,103,18,59,-68,17,41,-40,-4,-78,-16,34,-31,-45,19,-86,-4,-70,46,18,-92,26,55,125,-75,24,11,-7,47,78,70,49,-2,-20,94,49,41,44,21,14,-122, 
  /* [0][1][][] */ -127,-96,-15,-82,-87,-74,93,-115,-127,-127,85,-77,105,43,-122,-84,127,-127,-61,-65,-68,112,-34,11,-10,113,99,-35,-105,-78,-6,-53,-93,-127,-127,65,38,85,9,-86,67,-12,77,115,80,98,127,-127, -126,-109,-127,-120,-35,127,127,-127,101,56,127,-127,106,127,52,-122,57,-89,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-14,-127,-127,-107,57,127,127,127,-6,-127,113,-78,127,127,127,-8,124,119, -73,-56,-116,127,67,-38,42,-26,81,23,18,-62,7,60,62,-64,-16,10,-14,-63,-63,37,-69,-18,-106,60,32,-86,-59,37,127,-90,-52,11,70,82,87,69,-19,-28,46,127,70,21,48,-51,21,29, 
  /* [0][2][][] */ -109,-41,24,25,-53,-36,30,-39,43,-43,19,-20,12,14,-54,-18,-79,-22,96,-25,-19,31,-62,-12,4,62,78,-10,30,54,-9,-2,13,-81,-42,44,10,15,-65,-42,22,-3,34,46,25,46,21,-68, -86,-48,-39,-68,85,40,55,-56,108,18,-37,-66,-8,40,-127,-90,36,13,48,-56,-48,43,-58,52,-64,68,72,-41,29,2,-28,-28,-55,-16,-59,64,25,17,-103,-67,29,-36,77,71,40,-111,28,1, -21,-21,-53,-25,-26,-10,12,-18,-71,10,-8,-25,-12,17,34,-37,24,45,-4,-45,-35,17,-15,-19,-49,-1,25,-21,0,-64,50,-12,-72,21,24,53,19,21,-53,-22,4,52,23,22,16,-11,11,39, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.00332787842489779, 0.0050450162962079048, 0.0074469605460762978, 0.0066265575587749481, 0.023780997842550278, 0.006748860701918602, 0.0060005746781826019, 0.0035839143674820662, 0.0047837020829319954, 0.0035124823916703463, 0.0026991378981620073, 0.002425219863653183, 0.0034443454351276159, 0.0029819186311215162, 0.0083746975287795067, 0.0051731900312006474, 0.0057315868325531483, 0.01688075065612793, 0.0061186696402728558, 0.0070430273190140724, 0.0053327870555222034, 0.014135377481579781, 0.0065126759000122547, 0.012055283412337303, 0.0064732707105576992, 0.0031808170024305582, 0.0024247861001640558, 0.0040146983228623867, 0.0063364221714437008, 0.044602621346712112, 0.011316423304378986, 0.0032549099996685982, 0.0043279407545924187, 0.0063323867507278919, 0.0071189459413290024, 0.002602520864456892, 0.0041229990310966969, 0.0021200091578066349, 0.0049958652816712856, 0.0029375029262155294, 0.0064139747992157936, 0.0071346098557114601, 0.0031650182791054249, 0.0039804852567613125, 0.0031452528201043606, 0.015991408377885818, 0.0027680415660142899, 0.0082617811858654022, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1267, -580, -524, 1524, 12879, 2059, -505, 3875, 1293, 1309, 177, 2989, 1080, 599, -1031, 476, 2896, 13279, 3364, -830, 1517, -1444, -62, 2463, -362, -772, 1564, -11, 3067, 17254, 2417, -3, 448, -199, 2785, -55, 480, -145, 1361, 1170, 1667, 1949, 125, -382, 720, 2310, 1413, -216, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00040073529817163944, 0.00039514439413323998, 0.00025885654031299055, 0.00027362740365788341, 7.6175369031261653e-05, 0.00030455671367235482, 0.00049619690980762243, 0.00022385582269635051, 0.00029889188590459526, 0.00051428080769255757, 0.00030099236755631864, 0.00029754318529739976, 0.00021888005721848458, 0.00034171648439951241, 0.00026725008501671255, 0.00030221225460991263, 0.00025049579562619328, 7.2504568379372358e-05, 0.00022905270452611148, 0.00032540337997488678, 0.00033532115048728883, 0.00017975868831854314, 0.00043842315790243447, 0.00030036599491722882, 0.00040691794129088521, 0.00070011860225349665, 0.00032536103390157223, 0.0007854598225094378, 0.00026288515073247254, 5.8669404097599909e-05, 0.00030531917582266033, 0.00075946905417367816, 0.00038754654815420508, 0.0003530198591761291, 0.00027120590675622225, 0.00033079131389968097, 0.00039847887819632888, 0.00065203203121200204, 0.00033233762951567769, 0.00050523667596280575, 0.00032907607965171337, 0.00033534897374920547, 0.00033541966695338488, 0.00040045150672085583, 0.000390092987800017, 0.00022174709010869265, 0.00026040573720820248, 0.00028717349050566554, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -39,34,7,-18,-76,-44,-127,23, 
  /* [1][0][][] */ 74,-72,-54,-55,127,-85,88,24, 
  /* [2][0][][] */ -106,126,-43,-127,61,-31,-19,35, 
  /* [3][0][][] */ 45,15,89,5,94,127,124,-12, 
  /* [4][0][][] */ -78,-127,59,12,-66,-98,5,-36, 
  /* [5][0][][] */ 127,-29,66,60,-80,-5,11,-23, 
  /* [6][0][][] */ 22,36,127,-26,44,-35,-40,28, 
  /* [7][0][][] */ 23,9,-127,-30,-38,98,93,-66, 
  /* [8][0][][] */ -4,127,-30,10,76,110,48,52, 
  /* [9][0][][] */ -8,118,-60,84,9,-127,36,113, 
  /* [10][0][][] */ 4,-127,-3,-31,-81,-121,-58,-82, 
  /* [11][0][][] */ -127,-82,112,54,-7,-69,102,63, 
  /* [12][0][][] */ -29,43,-127,84,29,-51,-77,99, 
  /* [13][0][][] */ 96,-127,93,82,7,35,35,-59, 
  /* [14][0][][] */ -42,105,-46,-127,-25,-114,-26,-54, 
  /* [15][0][][] */ 40,118,29,-13,36,-71,104,-127, 
  /* [16][0][][] */ -117,-127,-61,86,-48,13,-23,73, 
  /* [17][0][][] */ -30,-116,-127,91,-68,74,-48,70, 
  /* [18][0][][] */ -106,-75,-47,108,-17,77,-9,127, 
  /* [19][0][][] */ 66,-124,105,-127,17,-69,33,-32, 
  /* [20][0][][] */ 0,73,30,13,37,127,78,-14, 
  /* [21][0][][] */ 24,120,43,-31,41,-72,95,-127, 
  /* [22][0][][] */ 19,17,106,17,-4,127,32,-38, 
  /* [23][0][][] */ -101,-64,27,-79,91,94,-63,-127, 
  /* [24][0][][] */ -98,-89,42,-79,115,108,-43,-127, 
  /* [25][0][][] */ 127,10,-59,-14,18,34,-61,-7, 
  /* [26][0][][] */ -126,-32,-127,-24,-50,-35,19,-4, 
  /* [27][0][][] */ 81,35,-7,-61,-127,-22,85,91, 
  /* [28][0][][] */ -127,-76,11,54,-78,-97,2,-10, 
  /* [29][0][][] */ 102,102,25,-127,33,16,-53,-90, 
  /* [30][0][][] */ -79,-68,33,-65,72,85,-57,-127, 
  /* [31][0][][] */ 47,46,-1,127,9,-69,13,12, 
  /* [32][0][][] */ -28,127,-9,38,20,71,-15,50, 
  /* [33][0][][] */ -41,127,-81,29,23,-35,-24,0, 
  /* [34][0][][] */ -127,-113,-60,118,-10,10,25,113, 
  /* [35][0][][] */ -51,127,-30,-7,72,105,50,68, 
  /* [36][0][][] */ 67,32,8,-44,-127,-30,100,109, 
  /* [37][0][][] */ -62,105,26,20,-127,99,-29,-100, 
  /* [38][0][][] */ 44,29,30,28,127,78,104,56, 
  /* [39][0][][] */ -23,-76,33,-15,4,37,-95,127, 
  /* [40][0][][] */ -62,-54,-74,127,-22,8,16,66, 
  /* [41][0][][] */ 127,15,56,91,-46,-14,-5,-20, 
  /* [42][0][][] */ -42,7,-68,-127,50,-109,5,75, 
  /* [43][0][][] */ 25,-4,91,-7,38,127,94,5, 
  /* [44][0][][] */ -31,-26,-70,127,46,11,-41,-38, 
  /* [45][0][][] */ 65,114,127,-111,50,-55,22,-111, 
  /* [46][0][][] */ -32,-127,-43,34,-10,38,-66,119, 
  /* [47][0][][] */ 40,41,120,2,88,127,121,-19, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0042852475307881832, 0.0042254612781107426, 0.0027680725324898958, 0.0029260239098221064, 0.0008145783212967217, 0.0032567654270678759, 0.005306062288582325, 0.0023937935475260019, 0.003196188947185874, 0.0054994416423141956, 0.0032186503522098064, 0.0031817664857953787, 0.0023405854590237141, 0.0036541321314871311, 0.0028578285127878189, 0.0032316949218511581, 0.0026786671951413155, 0.00077532482100650668, 0.0024493662640452385, 0.0034796884283423424, 0.0035857437178492546, 0.0019222425762563944, 0.0046882610768079758, 0.0032119522802531719, 0.0043513611890375614, 0.0074866912327706814, 0.0034792355727404356, 0.0083992844447493553, 0.002811152022331953, 0.00062737899133935571, 0.0032649186905473471, 0.0081213526427745819, 0.0041442140936851501, 0.0037750040646642447, 0.0029001298826187849, 0.003537304000928998, 0.0042611183598637581, 0.0069724791683256626, 0.0035538396332412958, 0.0054027289152145386, 0.0035189623013138771, 0.0035860412754118443, 0.0035867972765117884, 0.0042822128161787987, 0.0041714441031217575, 0.0023712438996881247, 0.0027846386656165123, 0.0030708785634487867, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7180, -2789, 11581, -10467, 23015, 7638, -8665, 11011, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017395634495187551, 0.00021230624406598508, 0.00016639515524730086, 0.00022932539286557585, 0.00019651534967124462, 0.00015678198542445898, 0.00016591644089203328, 0.00025719375116750598, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -13,-11,-16,-72,-27,-35,19,-22,35,7,-33,-4,113,127,-19,-104, 
  /* [1][0][][] */ 127,-59,-43,16,-46,74,-68,-44,-42,86,-33,-52,-11,1,-65,-15, 
  /* [2][0][][] */ -37,-95,42,41,47,-54,-77,-20,30,-88,23,-127,45,-23,-77,23, 
  /* [3][0][][] */ 40,13,14,18,-9,65,-52,-20,127,45,14,22,5,-13,11,18, 
  /* [4][0][][] */ -96,-34,-24,-127,-7,40,53,-118,34,-19,-46,-34,-117,29,-35,-15, 
  /* [5][0][][] */ 91,51,72,-33,43,-50,-127,-127,-18,-81,69,52,-61,56,66,-47, 
  /* [6][0][][] */ 108,41,-126,-75,32,-72,2,-93,-41,22,-127,93,93,-89,3,79, 
  /* [7][0][][] */ -127,-4,101,-25,-66,2,-5,-60,-50,60,88,-33,65,-26,29,25, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0073931445367634296, 0.0090230153873562813, 0.0070717940106987953, 0.0097463289275765419, 0.0083519024774432182, 0.0066632344387471676, 0.0070514488033950329, 0.010930733755230904, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 25809, -908, -220, 3457, -1235, 235, 10524, 878, -470, 227, -2341, 2730, -531, -277, -361, -929, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 8.9671513705980033e-05, 0.00017904560081660748, 0.0001692483201622963, 0.00017806299729272723, 0.0010333507088944316, 0.00075389351695775986, 0.00015995521971490234, 0.00083637912757694721, 0.00026784811052493751, 0.0011062650009989738, 0.00021472312801051885, 0.0001817257289076224, 0.00011517954408191144, 0.00024561231839470565, 0.00020213762763887644, 0.00062154378974810243, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 0,-2,3,3,-18,11,6,17,-4,-11,2,-10,-1,-8,0,-3, 4,0,-1,4,14,-2,10,-25,-6,9,-3,87,-5,20,2,-2, 3,-5,-3,5,3,-13,-3,12,4,2,0,-10,-2,-5,-3,-2, 
  /* [0][1][][] */ 13,-7,0,3,127,-24,-127,-20,127,127,0,-6,109,-25,-1,-21, -127,127,127,-1,-86,-90,-17,-100,19,-106,127,127,127,127,127,127, 19,2,-6,1,-9,127,2,-9,1,-13,-4,-5,6,-4,-13,-10, 
  /* [0][2][][] */ -3,0,0,-15,-17,16,51,8,-8,-8,-1,0,-4,0,-4,-14, 19,-14,-6,-127,7,-15,-9,127,-2,1,1,-15,-12,-59,-9,-39, 0,-5,-3,-6,2,-5,-1,-1,2,2,-3,1,-3,-6,-7,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0038110392633825541, 0.0076094381511211395, 0.0071930536068975925, 0.0075676771812140942, 0.043917402625083923, 0.032040473073720932, 0.0067980969324707985, 0.035546112805604935, 0.011383544653654099, 0.047016263008117676, 0.0091257328167557716, 0.0077233435586094856, 0.0048951306380331516, 0.010438523255288601, 0.0085908491164445877, 0.026415610685944557, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1111, -941, -741, 1162, 53160, 36490, 4314, 7609, 4260, 2728, 273, -709, 4927, -12418, -431, 36825, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00025850167730823159, 0.00081167981261387467, 0.00031639070948585868, 0.0001980909873964265, 2.8616635972866789e-05, 4.3963045754935592e-05, 0.00015828544565010816, 3.0606737709604204e-05, 0.00020306458463892341, 4.8443664127262309e-05, 0.00055025686742737889, 0.00070689601125195622, 0.00035509714507497847, 2.312233300472144e-05, 0.00067638431210070848, 4.1368119127582759e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 67, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 108, -94, -9, 
  /* [1][1][][] */ -127, 107, 25, 
  /* [1][2][][] */ 16, 0, -11, 
  /* [2][0][][] */ -22, -1, -46, 
  /* [2][1][][] */ 37, 95, 127, 
  /* [2][2][][] */ -11, -92, -77, 
  /* [3][0][][] */ 120, 126, 58, 
  /* [3][1][][] */ 1, -22, -15, 
  /* [3][2][][] */ -101, -127, -44, 
  /* [4][0][][] */ 23, -59, 3, 
  /* [4][1][][] */ 22, -127, 4, 
  /* [4][2][][] */ 14, -91, -15, 
  /* [5][0][][] */ -60, 34, 3, 
  /* [5][1][][] */ -127, 33, 7, 
  /* [5][2][][] */ -83, 27, 1, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -36, -52, -89, 
  /* [7][0][][] */ 35, 27, -11, 
  /* [7][1][][] */ 127, 67, -6, 
  /* [7][2][][] */ 40, 9, -20, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -24, 49, -13, 
  /* [9][1][][] */ -13, 127, -16, 
  /* [9][2][][] */ -3, 90, -9, 
  /* [10][0][][] */ 25, 89, 13, 
  /* [10][1][][] */ -36, -127, -29, 
  /* [10][2][][] */ 13, 41, 19, 
  /* [11][0][][] */ 8, -18, 11, 
  /* [11][1][][] */ 65, -92, 36, 
  /* [11][2][][] */ -83, 127, -45, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -79, 79, 5, 
  /* [13][0][][] */ 65, 14, -14, 
  /* [13][1][][] */ 127, 107, 1, 
  /* [13][2][][] */ 82, 107, 48, 
  /* [14][0][][] */ -30, -27, 49, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -15, -69, 82, 
  /* [15][0][][] */ -100, -34, 17, 
  /* [15][1][][] */ -127, -125, 19, 
  /* [15][2][][] */ -35, -94, -15, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.065917924046516418, 0.20697833597660065, 0.080679625272750854, 0.050513200461864471, 0.0072972415946424007, 0.011210575699806213, 0.040362786501646042, 0.0078047174029052258, 0.051781464368104935, 0.012353133410215378, 0.14031548798084259, 0.18025846779346466, 0.090549767017364502, 0.0058961943723261356, 0.17247799038887024, 0.010548870079219341, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.093515090644359589, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.06654154509305954, } };
const TfArray<1, int> quant50_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.067703902721405029, } };
const TfArray<1, int> quant53_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.082792699337005615, } };
const TfArray<1, int> quant54_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.059685003012418747, } };
const TfArray<1, int> quant58_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.05273817852139473, } };
const TfArray<1, int> quant61_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.071865759789943695, } };
const TfArray<1, int> quant62_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.047257240861654282, } };
const TfArray<1, int> quant65_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.086930178105831146, } };
const TfArray<1, int> quant66_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.035872206091880798, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13649182021617889, } };
const TfArray<1, int> quant69_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
